{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my blog I'm dexter , an algorithm engineer focusing on PnC of self-driving technique. This is the website I used to take notes while learning or working. More about me: Email Github Leetcode","title":"Home"},{"location":"#welcome-to-my-blog","text":"I'm dexter , an algorithm engineer focusing on PnC of self-driving technique. This is the website I used to take notes while learning or working. More about me: Email Github Leetcode","title":"Welcome to my blog"},{"location":"Coding/Cpp/cpp_17/","text":"C++17 \u65b0\u7279\u6027 \u6784\u9020\u51fd\u6570\u6a21\u677f\u63a8\u5bfc Automatic template argument deduction much like how it's done for functions, but now including class constructors. //eg.1 template<typename T = float> struct MyContainer{ T val_; MyContainer():val_{}{} MyContainer(T val):val_(val){} //... }; MyContainer c1{1};// type->int MyContainer c2; // type->float,default //eg.2 std::pair<int, double> p(1, 2.2); //before 17 std::pair p(1, 2.2); //now, \u81ea\u52a8\u63a8\u5bfc std::vector v = {1, 2, 3};//now Declaring non-type template parameters with auto Following the deduction rules of auto , while respecting the non-type template parameter list of allowable types[*], template arguments can be deduced from the type ot its arguments: template <auto... seq> struct my_integer_sequence { // Implementation here ... }; // Explicitly pass type `int` as template argument. auto seq = std::integer_sequence<int, 0, 1, 2>(); // Type is deduced to be `int`. auto seq2 = my_integer_sequence<0, 1, 2>(); Folding expressions A fold expression performs a fold of a template parameter pack over a binary operator. An expression of the form (... op e) or (e op ...) , where op is a fold-operator and e is an unexpanded parameter pack, are called unary folds. An expression of the form (e1 op ... op e2) , where op are fold-operators, is called a binary fold. Either e1 or e2 is an unexpanded parameter pack, but not both. template <typename... Args> bool logicalAnd(Args... args) { // Binary folding. return (true && ... && args); } bool b = true; bool& b2 = b; logicalAnd(b, b2, true); // == true template <typename... Args> auto sum(Args... args) { // Unary folding. return (... + args); } sum(1.0, 2.0f, 3); // == 6.0 New rules for auto deduction from braced-init-list Changes to auto deduction when used with the uniform initialization syntax. Previously, auto x {3} deduced a std::initializer_list<int> , which now deduces to int . auto x1 {1, 2, 3}; // error: not a single element. auto x2 = {1, 2, 3}; // x2 is std::initializer_list<int> auto x3 {3}; // x3 is int auto x4 {3.0}; // x4 is double constexpr lambda Compile-time lambda using constexpr . auto identity = [](int n) constexpr { return n; }; static_assert(identity(123) == 123); constexpr auto add = [](int x, int y) { auto L = [=] { return x; }; auto R = [=] { return y; }; return [=] { return L() + R(); }; }; static_assert(add(1, 2)() == 3); constexpr int addOne(int n) { return [n] { return n + 1; }(); } static_assert(addOne(1) == 2); Lambda capture this by value Capturing this in a lambda's environment was previously reference-only. An example of where this is problematic is asynchronous code using callbacks that require an object to be available, potentially past its lifetime. *this (C++17) will now make a copy of the current object, while this (C++11) continues to capture by reference. struct MyObj { int value {123}; auto getValueCopy() { return [*this] { return value; }; } auto getValueRef() { return [this] { return value; }; } }; MyObj mo; auto valueCopy = mo.getValueCopy(); auto valueRef = mo.getValueRef(); mo.value = 321; valueCopy(); // 123 valueRef(); // 321 Inline variables The inline specifier can be applied to variables as well as to functions. A variable declared inline has the same semantics as a function declared inline. // Disassembly example using compiler explorer. struct S { int x; }; inline S x1 = S{321}; // mov esi, dword ptr [x1] // x1: .long 321 S x2 = S{123}; // mov eax, dword ptr [.L_ZZ4mainE2x2] // mov dword ptr [rbp - 8], eax // .L_ZZ4mainE2x2: .long 123 It can also be used to declare and define a static member variable, such that it does not need to be initialized in the source file. struct S { S() : id{count++} {} ~S() { count--; } int id; static inline int count{0}; // declare and initialize count to 0 within the class }; Nested namespaces Using the namespace resolution operator to create nested namespace definitions. namespace A { namespace B { namespace C { int i; } } } // vs. namespace A::B::C { int i; } Structured bindings A proposal for de-structuring initialization, that would allow writting auto [ x, y, z] = expr; where the type of expr was a tuple-like object, whose elements would be bound to the variables x , y and z (which is construc declares). tuple-like objects include std::tuple , std::pair , std::array , and aggregate structures. using Coordinate = std::pair<int, int>; Coordinate origin() { return Coordinate{0, 0}; } const auto [ x, y ] = origin(); x; // == 0 y; // == 0 std::unordered_map<std::string, int> mapping { {\"a\", 1}, {\"b\", 2}, {\"c\", 3} }; // Destructure by reference. for (const auto& [key, value] : mapping) { // Do something with key and value } Selection statements with initializer New version of if and switch statements which simplify code patterns and help users keep scopes tight. { std::lock_guard<std::mutex> lk(mx); if (v.empty()) v.push_back(val); } // vs. if (std::lock_guard<std::mutex> lk(mx); v.empty()) { v.push_back(val); } Foo gadget(args); switch (auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); } // vs. switch (Foo gadget(args); auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); } constexpr if Write code that is instantiated depending on a compile=time condition. template <typename T> constexpr bool isIntegral() { if constexpr (std::is_integral<T>::value) { return true; } else { return false; } } static_assert(isIntegral<int>() == true); static_assert(isIntegral<char>() == true); static_assert(isIntegral<double>() == false); struct S {}; static_assert(isIntegral<S>() == false); UTF-8 character literals A character literal that begins with u8 is a character literal of type char . The value of a UTF-8 character literal is equal to its ISO 10646 code point value. char x = u8'x'; Direct list initialization of enums Enums can now be initialized using braced syntax. enum byte : unsigned char {}; byte b {0}; // OK byte c {-1}; // ERROR byte d = byte{1}; // OK byte e = byte{256}; // ERROR fallthrough, nodiscard, maybe_unused attributes C++17 introduces threee new attributes: [[fallthrough]] : indicates to the compiler that falling through in a switch statement is intended behavior. switch (n) { case 1: [[fallthrough]] // ... case 2: // ... break; } [[nodiscard]] : issues a warning when either a function or class has this attribute and its return value is discarded. [[nodiscard]] bool do_something() { return is_success; // true for success, false for failure } do_something(); // warning: ignoring return value of 'bool do_something()', // declared with attribute 'nodiscard' // Only issues a warning when `error_info` is returned by value. struct [[nodiscard]] error_info { // ... }; error_info do_something() { error_info ei; // ... return ei; } do_something(); // warning: ignoring returned value of type 'error_info', // declared with attribute 'nodiscard' [[maybe_unused]] : indicates to be compiler that a variable or parameter might be unused an is intended. void my_callback(std::string msg, [[maybe_unused]] bool error) { // Don't care if `msg` is an error message, just log it. log(msg); } C++17 New Libraries std::variant The class template std::variant represents a type-safe union . An instance of std::variant at any given time holds a value of one of its alternativqe types(it's possible for it to be valueless). std::variant<int, double> v{ 12 }; std::get<int>(v); // == 12 std::get<0>(v); // == 12 v = 12.0; std::get<double>(v); // == 12.0 std::get<1>(v); // == 12.0 std::optional std::optional<std::string> create(bool b) { if (b) { return \"Godzilla\"; } else { return {}; } } create(false).value_or(\"empty\"); // == \"empty\" create(true).value(); // == \"Godzilla\" // optional-returning factory functions are usable as conditions of while and if if (auto str = create(true)) { // ... } std::any A type-safe container for single values of any type. std::any x {5}; x.has_value() // == true std::any_cast<int>(x) // == 5 std::any_cast<int&>(x) = 10; std::any_cast<int>(x) // == 10 std::string_view A non-owning reference to a string. Useful for providing an abstraction on top of strings (e.g. for parsing). // Regular strings. std::string_view cppstr {\"foo\"}; // Wide strings. std::wstring_view wcstr_v {L\"baz\"}; // Character arrays. char array[3] = {'b', 'a', 'r'}; std::string_view array_v(array, std::size(array)); std::string str {\" trim me\"}; std::string_view v {str}; v.remove_prefix(std::min(v.find_first_not_of(\" \"), v.size())); str; // == \" trim me\" v; // == \"trim me\" std::invoke Invoke a Callable object with parameters. Examples of Callable objects are std::function or std::bind where an object can be called similarly to a regular function. template <typename Callable> class Proxy { Callable c; public: Proxy(Callable c): c(c) {} template <class... Args> decltype(auto) operator()(Args&&... args) { // ... return std::invoke(c, std::forward<Args>(args)...); } }; auto add = [](int x, int y) { return x + y; }; Proxy<decltype(add)> p {add}; p(1, 2); // == 3 std::apply Invoke a Callable object with a tuple of arguments auto add = [](int x, int y) { return x + y; }; std::apply(add, std::make_tuple(1, 2)); // == 3 std::filesystem The new std::filesystem library provides a standard way to manipulate files, directories, and paths in a filesystem. const auto bigFilePath {\"bigFileToCopy\"}; if (std::filesystem::exists(bigFilePath)) { const auto bigFileSize {std::filesystem::file_size(bigFilePath)}; std::filesystem::path tmpPath {\"/tmp\"}; if (std::filesystem::space(tmpPath).available > bigFileSize) { std::filesystem::create_directory(tmpPath.append(\"example\")); std::filesystem::copy_file(bigFilePath, tmpPath.append(\"newFile\")); } } std::byte The new std::byte type provides a standard way of representing data as byte. Benefits of using std::byte over char or unsigned char is that it is not a character type, and is also not an arithmetic type; while the only operator overloads available are bitwise operator. std::byte a {0}; std::byte b {0xFF}; int i = std::to_integer<int>(b); // 0xFF std::byte c = a & b; int j = std::to_integer<int>(c); // 0 Splicing for maps and sets Moving nodes and merging containers whithout the overhead of expensive copies, moves, or heap allocations/deallocations. Moving elements from one map to another: std::map<int, string> src {{1, \"one\"}, {2, \"two\"}, {3, \"buckle my shoe\"}}; std::map<int, string> dst {{3, \"three\"}}; dst.insert(src.extract(src.find(1))); // Cheap remove and insert of { 1, \"one\" } from `src` to `dst`. dst.insert(src.extract(2)); // Cheap remove and insert of { 2, \"two\" } from `src` to `dst`. // dst == { { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; Inserting elements which outlive the container: auto elementFactory() { std::set<...> s; s.emplace(...); return s.extract(s.begin()); } s2.insert(elementFactory()); Changing the key of a map element: std::map<int, string> m {{1, \"one\"}, {2, \"two\"}, {3, \"three\"}}; auto e = m.extract(2); e.key() = 4; m.insert(std::move(e)); // m == { { 1, \"one\" }, { 3, \"three\" }, { 4, \"two\" } } parallel algorithms Many of the STL algorithms, such as the copy , find and sort methods, started to support the parallel execution policies: seq , par and par_unseq which translate to \"sequentially\", \"parallel\" and \"parallel unsequenced\". std::vector<int> longVector; // Find element using parallel execution policy auto result1 = std::find(std::execution::par, std::begin(longVector), std::end(longVector), 2); // Sort elements using sequential execution policy auto result2 = std::sort(std::execution::seq, std::begin(longVector), std::end(longVector));","title":"C++17 \u65b0\u7279\u6027"},{"location":"Coding/Cpp/cpp_17/#c17","text":"","title":"C++17 \u65b0\u7279\u6027"},{"location":"Coding/Cpp/cpp_17/#_1","text":"Automatic template argument deduction much like how it's done for functions, but now including class constructors. //eg.1 template<typename T = float> struct MyContainer{ T val_; MyContainer():val_{}{} MyContainer(T val):val_(val){} //... }; MyContainer c1{1};// type->int MyContainer c2; // type->float,default //eg.2 std::pair<int, double> p(1, 2.2); //before 17 std::pair p(1, 2.2); //now, \u81ea\u52a8\u63a8\u5bfc std::vector v = {1, 2, 3};//now","title":"\u6784\u9020\u51fd\u6570\u6a21\u677f\u63a8\u5bfc"},{"location":"Coding/Cpp/cpp_17/#declaring-non-type-template-parameters-with-auto","text":"Following the deduction rules of auto , while respecting the non-type template parameter list of allowable types[*], template arguments can be deduced from the type ot its arguments: template <auto... seq> struct my_integer_sequence { // Implementation here ... }; // Explicitly pass type `int` as template argument. auto seq = std::integer_sequence<int, 0, 1, 2>(); // Type is deduced to be `int`. auto seq2 = my_integer_sequence<0, 1, 2>();","title":"Declaring non-type template parameters with auto"},{"location":"Coding/Cpp/cpp_17/#folding-expressions","text":"A fold expression performs a fold of a template parameter pack over a binary operator. An expression of the form (... op e) or (e op ...) , where op is a fold-operator and e is an unexpanded parameter pack, are called unary folds. An expression of the form (e1 op ... op e2) , where op are fold-operators, is called a binary fold. Either e1 or e2 is an unexpanded parameter pack, but not both. template <typename... Args> bool logicalAnd(Args... args) { // Binary folding. return (true && ... && args); } bool b = true; bool& b2 = b; logicalAnd(b, b2, true); // == true template <typename... Args> auto sum(Args... args) { // Unary folding. return (... + args); } sum(1.0, 2.0f, 3); // == 6.0","title":"Folding expressions"},{"location":"Coding/Cpp/cpp_17/#new-rules-for-auto-deduction-from-braced-init-list","text":"Changes to auto deduction when used with the uniform initialization syntax. Previously, auto x {3} deduced a std::initializer_list<int> , which now deduces to int . auto x1 {1, 2, 3}; // error: not a single element. auto x2 = {1, 2, 3}; // x2 is std::initializer_list<int> auto x3 {3}; // x3 is int auto x4 {3.0}; // x4 is double","title":"New rules for auto deduction from braced-init-list"},{"location":"Coding/Cpp/cpp_17/#constexpr-lambda","text":"Compile-time lambda using constexpr . auto identity = [](int n) constexpr { return n; }; static_assert(identity(123) == 123); constexpr auto add = [](int x, int y) { auto L = [=] { return x; }; auto R = [=] { return y; }; return [=] { return L() + R(); }; }; static_assert(add(1, 2)() == 3); constexpr int addOne(int n) { return [n] { return n + 1; }(); } static_assert(addOne(1) == 2);","title":"constexpr lambda"},{"location":"Coding/Cpp/cpp_17/#lambda-capture-this-by-value","text":"Capturing this in a lambda's environment was previously reference-only. An example of where this is problematic is asynchronous code using callbacks that require an object to be available, potentially past its lifetime. *this (C++17) will now make a copy of the current object, while this (C++11) continues to capture by reference. struct MyObj { int value {123}; auto getValueCopy() { return [*this] { return value; }; } auto getValueRef() { return [this] { return value; }; } }; MyObj mo; auto valueCopy = mo.getValueCopy(); auto valueRef = mo.getValueRef(); mo.value = 321; valueCopy(); // 123 valueRef(); // 321","title":"Lambda capture this by value"},{"location":"Coding/Cpp/cpp_17/#inline-variables","text":"The inline specifier can be applied to variables as well as to functions. A variable declared inline has the same semantics as a function declared inline. // Disassembly example using compiler explorer. struct S { int x; }; inline S x1 = S{321}; // mov esi, dword ptr [x1] // x1: .long 321 S x2 = S{123}; // mov eax, dword ptr [.L_ZZ4mainE2x2] // mov dword ptr [rbp - 8], eax // .L_ZZ4mainE2x2: .long 123 It can also be used to declare and define a static member variable, such that it does not need to be initialized in the source file. struct S { S() : id{count++} {} ~S() { count--; } int id; static inline int count{0}; // declare and initialize count to 0 within the class };","title":"Inline variables"},{"location":"Coding/Cpp/cpp_17/#nested-namespaces","text":"Using the namespace resolution operator to create nested namespace definitions. namespace A { namespace B { namespace C { int i; } } } // vs. namespace A::B::C { int i; }","title":"Nested namespaces"},{"location":"Coding/Cpp/cpp_17/#structured-bindings","text":"A proposal for de-structuring initialization, that would allow writting auto [ x, y, z] = expr; where the type of expr was a tuple-like object, whose elements would be bound to the variables x , y and z (which is construc declares). tuple-like objects include std::tuple , std::pair , std::array , and aggregate structures. using Coordinate = std::pair<int, int>; Coordinate origin() { return Coordinate{0, 0}; } const auto [ x, y ] = origin(); x; // == 0 y; // == 0 std::unordered_map<std::string, int> mapping { {\"a\", 1}, {\"b\", 2}, {\"c\", 3} }; // Destructure by reference. for (const auto& [key, value] : mapping) { // Do something with key and value }","title":"Structured bindings"},{"location":"Coding/Cpp/cpp_17/#selection-statements-with-initializer","text":"New version of if and switch statements which simplify code patterns and help users keep scopes tight. { std::lock_guard<std::mutex> lk(mx); if (v.empty()) v.push_back(val); } // vs. if (std::lock_guard<std::mutex> lk(mx); v.empty()) { v.push_back(val); } Foo gadget(args); switch (auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); } // vs. switch (Foo gadget(args); auto s = gadget.status()) { case OK: gadget.zip(); break; case Bad: throw BadFoo(s.message()); }","title":"Selection statements with initializer"},{"location":"Coding/Cpp/cpp_17/#constexpr-if","text":"Write code that is instantiated depending on a compile=time condition. template <typename T> constexpr bool isIntegral() { if constexpr (std::is_integral<T>::value) { return true; } else { return false; } } static_assert(isIntegral<int>() == true); static_assert(isIntegral<char>() == true); static_assert(isIntegral<double>() == false); struct S {}; static_assert(isIntegral<S>() == false);","title":"constexpr if"},{"location":"Coding/Cpp/cpp_17/#utf-8-character-literals","text":"A character literal that begins with u8 is a character literal of type char . The value of a UTF-8 character literal is equal to its ISO 10646 code point value. char x = u8'x';","title":"UTF-8 character literals"},{"location":"Coding/Cpp/cpp_17/#direct-list-initialization-of-enums","text":"Enums can now be initialized using braced syntax. enum byte : unsigned char {}; byte b {0}; // OK byte c {-1}; // ERROR byte d = byte{1}; // OK byte e = byte{256}; // ERROR","title":"Direct list initialization of enums"},{"location":"Coding/Cpp/cpp_17/#fallthrough-nodiscard-maybe_unused-attributes","text":"C++17 introduces threee new attributes: [[fallthrough]] : indicates to the compiler that falling through in a switch statement is intended behavior. switch (n) { case 1: [[fallthrough]] // ... case 2: // ... break; } [[nodiscard]] : issues a warning when either a function or class has this attribute and its return value is discarded. [[nodiscard]] bool do_something() { return is_success; // true for success, false for failure } do_something(); // warning: ignoring return value of 'bool do_something()', // declared with attribute 'nodiscard' // Only issues a warning when `error_info` is returned by value. struct [[nodiscard]] error_info { // ... }; error_info do_something() { error_info ei; // ... return ei; } do_something(); // warning: ignoring returned value of type 'error_info', // declared with attribute 'nodiscard' [[maybe_unused]] : indicates to be compiler that a variable or parameter might be unused an is intended. void my_callback(std::string msg, [[maybe_unused]] bool error) { // Don't care if `msg` is an error message, just log it. log(msg); }","title":"fallthrough, nodiscard, maybe_unused attributes"},{"location":"Coding/Cpp/cpp_17/#c17-new-libraries","text":"","title":"C++17 New Libraries"},{"location":"Coding/Cpp/cpp_17/#stdvariant","text":"The class template std::variant represents a type-safe union . An instance of std::variant at any given time holds a value of one of its alternativqe types(it's possible for it to be valueless). std::variant<int, double> v{ 12 }; std::get<int>(v); // == 12 std::get<0>(v); // == 12 v = 12.0; std::get<double>(v); // == 12.0 std::get<1>(v); // == 12.0","title":"std::variant"},{"location":"Coding/Cpp/cpp_17/#stdoptional","text":"std::optional<std::string> create(bool b) { if (b) { return \"Godzilla\"; } else { return {}; } } create(false).value_or(\"empty\"); // == \"empty\" create(true).value(); // == \"Godzilla\" // optional-returning factory functions are usable as conditions of while and if if (auto str = create(true)) { // ... }","title":"std::optional"},{"location":"Coding/Cpp/cpp_17/#stdany","text":"A type-safe container for single values of any type. std::any x {5}; x.has_value() // == true std::any_cast<int>(x) // == 5 std::any_cast<int&>(x) = 10; std::any_cast<int>(x) // == 10","title":"std::any"},{"location":"Coding/Cpp/cpp_17/#stdstring_view","text":"A non-owning reference to a string. Useful for providing an abstraction on top of strings (e.g. for parsing). // Regular strings. std::string_view cppstr {\"foo\"}; // Wide strings. std::wstring_view wcstr_v {L\"baz\"}; // Character arrays. char array[3] = {'b', 'a', 'r'}; std::string_view array_v(array, std::size(array)); std::string str {\" trim me\"}; std::string_view v {str}; v.remove_prefix(std::min(v.find_first_not_of(\" \"), v.size())); str; // == \" trim me\" v; // == \"trim me\"","title":"std::string_view"},{"location":"Coding/Cpp/cpp_17/#stdinvoke","text":"Invoke a Callable object with parameters. Examples of Callable objects are std::function or std::bind where an object can be called similarly to a regular function. template <typename Callable> class Proxy { Callable c; public: Proxy(Callable c): c(c) {} template <class... Args> decltype(auto) operator()(Args&&... args) { // ... return std::invoke(c, std::forward<Args>(args)...); } }; auto add = [](int x, int y) { return x + y; }; Proxy<decltype(add)> p {add}; p(1, 2); // == 3","title":"std::invoke"},{"location":"Coding/Cpp/cpp_17/#stdapply","text":"Invoke a Callable object with a tuple of arguments auto add = [](int x, int y) { return x + y; }; std::apply(add, std::make_tuple(1, 2)); // == 3","title":"std::apply"},{"location":"Coding/Cpp/cpp_17/#stdfilesystem","text":"The new std::filesystem library provides a standard way to manipulate files, directories, and paths in a filesystem. const auto bigFilePath {\"bigFileToCopy\"}; if (std::filesystem::exists(bigFilePath)) { const auto bigFileSize {std::filesystem::file_size(bigFilePath)}; std::filesystem::path tmpPath {\"/tmp\"}; if (std::filesystem::space(tmpPath).available > bigFileSize) { std::filesystem::create_directory(tmpPath.append(\"example\")); std::filesystem::copy_file(bigFilePath, tmpPath.append(\"newFile\")); } }","title":"std::filesystem"},{"location":"Coding/Cpp/cpp_17/#stdbyte","text":"The new std::byte type provides a standard way of representing data as byte. Benefits of using std::byte over char or unsigned char is that it is not a character type, and is also not an arithmetic type; while the only operator overloads available are bitwise operator. std::byte a {0}; std::byte b {0xFF}; int i = std::to_integer<int>(b); // 0xFF std::byte c = a & b; int j = std::to_integer<int>(c); // 0","title":"std::byte"},{"location":"Coding/Cpp/cpp_17/#splicing-for-maps-and-sets","text":"Moving nodes and merging containers whithout the overhead of expensive copies, moves, or heap allocations/deallocations. Moving elements from one map to another: std::map<int, string> src {{1, \"one\"}, {2, \"two\"}, {3, \"buckle my shoe\"}}; std::map<int, string> dst {{3, \"three\"}}; dst.insert(src.extract(src.find(1))); // Cheap remove and insert of { 1, \"one\" } from `src` to `dst`. dst.insert(src.extract(2)); // Cheap remove and insert of { 2, \"two\" } from `src` to `dst`. // dst == { { 1, \"one\" }, { 2, \"two\" }, { 3, \"three\" } }; Inserting elements which outlive the container: auto elementFactory() { std::set<...> s; s.emplace(...); return s.extract(s.begin()); } s2.insert(elementFactory()); Changing the key of a map element: std::map<int, string> m {{1, \"one\"}, {2, \"two\"}, {3, \"three\"}}; auto e = m.extract(2); e.key() = 4; m.insert(std::move(e)); // m == { { 1, \"one\" }, { 3, \"three\" }, { 4, \"two\" } }","title":"Splicing for maps and sets"},{"location":"Coding/Cpp/cpp_17/#parallel-algorithms","text":"Many of the STL algorithms, such as the copy , find and sort methods, started to support the parallel execution policies: seq , par and par_unseq which translate to \"sequentially\", \"parallel\" and \"parallel unsequenced\". std::vector<int> longVector; // Find element using parallel execution policy auto result1 = std::find(std::execution::par, std::begin(longVector), std::end(longVector), 2); // Sort elements using sequential execution policy auto result2 = std::sort(std::execution::seq, std::begin(longVector), std::end(longVector));","title":"parallel algorithms"},{"location":"M%26L/eskf/","text":"ErrorState $$ ErrorState=\\begin{bmatrix} VarType \\quad error_{var} \\\\ CovType \\quad error_state_cov \\quad state_progation \\quad propagated_noise_cov \\\\ double \\quad beta_{coefficient} \\end{bmatrix} $$ CoreState $$ CoreState=\\begin{bmatrix} P \\\\ V \\\\ Q \\\\ Ba \\\\ Bg \\\\ ErrorState \\\\ double \\quad beta_{coefficient} \\end{bmatrix} $$","title":"Eskf"},{"location":"M%26L/eskf/#errorstate","text":"$$ ErrorState=\\begin{bmatrix} VarType \\quad error_{var} \\\\ CovType \\quad error_state_cov \\quad state_progation \\quad propagated_noise_cov \\\\ double \\quad beta_{coefficient} \\end{bmatrix} $$","title":"ErrorState"},{"location":"M%26L/eskf/#corestate","text":"$$ CoreState=\\begin{bmatrix} P \\\\ V \\\\ Q \\\\ Ba \\\\ Bg \\\\ ErrorState \\\\ double \\quad beta_{coefficient} \\end{bmatrix} $$","title":"CoreState"},{"location":"M%26L/point_matcher/","text":"note of pointmatcher \u7b80\u8981ICP target(ref-scan|pre-scan)\u548csource(read-scan|cur-scan)\u53bb\u9664\u8d28\u5fc3 $$ R^ = argmin \\frac{1}{2} \\sum_{i=1}^{n} \\lVert q_t - R q_s\\rVert^2 \\\\ t^ = q_t - R q_s \\\\ W = \\sum \\left( q_t q_s^T\\right) = U \\Sigma V^T \\to R = UV^T \\qquad t = q_t - Rq_s $$ residuals\u53ef\u7531 point->point \u3001 point->line \u3001 point->plane PointMatcher ref \u548c reading \u53bb\u9664\u8d28\u5fc3 tf_refi_in_refmean reference\u539f\u70b9\u4e3aref \u7b97\u6cd5\u6d41\u7a0b T->init Identity Transform \u5bf9reading\u505a$T$\u53d8\u6362,\u5f62\u6210reading_reset \u5bf9reading_reset\u4e2d\u6bcf\u4e2a\u70b9\u5728reference\u4e2d\u5bfb\u627e\u6700\u90bb\u8fd1\u7684\u70b9,\u5e76\u4fdd\u5b58\u8ddd\u79bb\u548cindex details ref's Normal e.g $3 \\times 277$ $$ \\begin{bmatrix} x_1 &x_2 &... &x_n \\\\ y_1 &y_2 &... &y_n \\\\ z_1 &z_2 &... &z_n \\end{bmatrix} $$ $reading \\times ref's normal$, which is $277 \\times 3 \\cdot 3 \\times 277$ $$ tmp = \\begin{bmatrix} 0 &-1 & 0 \\\\ 1 &0 & 0 \\\\ 0 & 0 &0 \\end{bmatrix} \\times \\begin{bmatrix} x_1 &x_2 &x_3 &... \\\\ y_1 &y_2 &y_3 &... \\\\ z_1 &z_2 &z_3 &... \\end{bmatrix} \\to \\begin{bmatrix} -y_1 & -y_2 & -y_3 & ... \\\\ x_1 & x_2 & x_3 & ... \\\\ 0 & 0 & 0 & ... \\end{bmatrix}\\\\ $$ $$ ret = tmp^T \\times ref's normal \\quad is \\quad N \\times N, which = \\begin{bmatrix} -y1 & x1 & 0 \\\\ -y2 & x2 & 0 \\\\ -y3 & x3 & 0 \\\\ ... & ... &... \\end{bmatrix} \\times \\begin{bmatrix} nx_1 & nx_2 & ... \\\\ ny_1 & ny_2 & ... \\\\ nz_1 & nz_2 & ... \\end{bmatrix} = \\begin{bmatrix} -y_1nx_1 + x_1ny_1 & elem_{12} & .....\\\\ elem_{21} & -y_2nx_2 + x_2ny_2 & .....\\\\ .... & ...&-y_nnx_n + x_nny_n \\end{bmatrix} $$ \u53d6$ret$\u7684\u5bf9\u89d2\u7ebf,\u5373\u4e3areading\u70b9\u4e91\u5230ref's normal\u7684\u8ddd\u79bb(\u70b9\u5230\u6cd5\u5411\u91cf\u7684\u8ddd\u79bb) $tmp2 = ret.diagonal.transpose = \\begin{bmatrix} d1 & d2 & d3 & ...& d_n \\end{bmatrix}$ $A=WF \\cdot F^t \\to AX=b \\qquad (4, 4) \\times (4, 1) \\to (4, 1)$ $$ A \\cdot x=\\begin{bmatrix} \\sum_{i=1}^n d_i\\cdot wd_i & & & \\\\ & \\sum_{i=1}^nwnx_i\\cdot nx_i & & \\\\ & & \\sum_{i=1}^nwny_i\\cdot ny_i & \\\\ & & & \\sum_{i=1}^nwnz_i\\cdot nz_i \\end{bmatrix} \\begin{bmatrix} yaw \\\\ X \\\\ Y \\\\ Z \\end{bmatrix} = b $$ $$ b = \\underbrace{ \\begin{bmatrix} & tmp2 \\cdot \\omega(\u6743\u91cd) \\\\ nx_1 & nx_2 & ...\\\\ ny_1 & ny_2 & ...\\\\ nz_1 & nz_2 & ... \\end{bmatrix} } {WF} \\times \\underbrace{ \\begin{bmatrix} \\Delta x_1 nx_1 + \\Delta y_1 ny_1 + \\Delta z_1 nz_1 \\\\ \\Delta x_2 nx_2 + \\Delta y_2 ny_2 + \\Delta z_2 nz_2 \\\\ ...\\\\ \\end{bmatrix} } = -\\underbrace{ \\begin{bmatrix} \\sum {i=1}^n d_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\\\ \\sum_{i=1}^n nx_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\\\ \\sum_{i=1}^n ny_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\\\ \\sum_{i=1}^n nz_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\end{bmatrix} }_{(4\\times1)} $$","title":"note of pointmatcher"},{"location":"M%26L/point_matcher/#note-of-pointmatcher","text":"","title":"note of pointmatcher"},{"location":"M%26L/point_matcher/#icp","text":"target(ref-scan|pre-scan)\u548csource(read-scan|cur-scan)\u53bb\u9664\u8d28\u5fc3 $$ R^ = argmin \\frac{1}{2} \\sum_{i=1}^{n} \\lVert q_t - R q_s\\rVert^2 \\\\ t^ = q_t - R q_s \\\\ W = \\sum \\left( q_t q_s^T\\right) = U \\Sigma V^T \\to R = UV^T \\qquad t = q_t - Rq_s $$ residuals\u53ef\u7531 point->point \u3001 point->line \u3001 point->plane","title":"\u7b80\u8981ICP"},{"location":"M%26L/point_matcher/#pointmatcher","text":"","title":"PointMatcher"},{"location":"M%26L/point_matcher/#ref-reading","text":"tf_refi_in_refmean reference\u539f\u70b9\u4e3aref \u7b97\u6cd5\u6d41\u7a0b T->init Identity Transform \u5bf9reading\u505a$T$\u53d8\u6362,\u5f62\u6210reading_reset \u5bf9reading_reset\u4e2d\u6bcf\u4e2a\u70b9\u5728reference\u4e2d\u5bfb\u627e\u6700\u90bb\u8fd1\u7684\u70b9,\u5e76\u4fdd\u5b58\u8ddd\u79bb\u548cindex","title":"ref \u548c reading \u53bb\u9664\u8d28\u5fc3"},{"location":"M%26L/point_matcher/#details","text":"ref's Normal e.g $3 \\times 277$ $$ \\begin{bmatrix} x_1 &x_2 &... &x_n \\\\ y_1 &y_2 &... &y_n \\\\ z_1 &z_2 &... &z_n \\end{bmatrix} $$ $reading \\times ref's normal$, which is $277 \\times 3 \\cdot 3 \\times 277$ $$ tmp = \\begin{bmatrix} 0 &-1 & 0 \\\\ 1 &0 & 0 \\\\ 0 & 0 &0 \\end{bmatrix} \\times \\begin{bmatrix} x_1 &x_2 &x_3 &... \\\\ y_1 &y_2 &y_3 &... \\\\ z_1 &z_2 &z_3 &... \\end{bmatrix} \\to \\begin{bmatrix} -y_1 & -y_2 & -y_3 & ... \\\\ x_1 & x_2 & x_3 & ... \\\\ 0 & 0 & 0 & ... \\end{bmatrix}\\\\ $$ $$ ret = tmp^T \\times ref's normal \\quad is \\quad N \\times N, which = \\begin{bmatrix} -y1 & x1 & 0 \\\\ -y2 & x2 & 0 \\\\ -y3 & x3 & 0 \\\\ ... & ... &... \\end{bmatrix} \\times \\begin{bmatrix} nx_1 & nx_2 & ... \\\\ ny_1 & ny_2 & ... \\\\ nz_1 & nz_2 & ... \\end{bmatrix} = \\begin{bmatrix} -y_1nx_1 + x_1ny_1 & elem_{12} & .....\\\\ elem_{21} & -y_2nx_2 + x_2ny_2 & .....\\\\ .... & ...&-y_nnx_n + x_nny_n \\end{bmatrix} $$ \u53d6$ret$\u7684\u5bf9\u89d2\u7ebf,\u5373\u4e3areading\u70b9\u4e91\u5230ref's normal\u7684\u8ddd\u79bb(\u70b9\u5230\u6cd5\u5411\u91cf\u7684\u8ddd\u79bb) $tmp2 = ret.diagonal.transpose = \\begin{bmatrix} d1 & d2 & d3 & ...& d_n \\end{bmatrix}$ $A=WF \\cdot F^t \\to AX=b \\qquad (4, 4) \\times (4, 1) \\to (4, 1)$ $$ A \\cdot x=\\begin{bmatrix} \\sum_{i=1}^n d_i\\cdot wd_i & & & \\\\ & \\sum_{i=1}^nwnx_i\\cdot nx_i & & \\\\ & & \\sum_{i=1}^nwny_i\\cdot ny_i & \\\\ & & & \\sum_{i=1}^nwnz_i\\cdot nz_i \\end{bmatrix} \\begin{bmatrix} yaw \\\\ X \\\\ Y \\\\ Z \\end{bmatrix} = b $$ $$ b = \\underbrace{ \\begin{bmatrix} & tmp2 \\cdot \\omega(\u6743\u91cd) \\\\ nx_1 & nx_2 & ...\\\\ ny_1 & ny_2 & ...\\\\ nz_1 & nz_2 & ... \\end{bmatrix} } {WF} \\times \\underbrace{ \\begin{bmatrix} \\Delta x_1 nx_1 + \\Delta y_1 ny_1 + \\Delta z_1 nz_1 \\\\ \\Delta x_2 nx_2 + \\Delta y_2 ny_2 + \\Delta z_2 nz_2 \\\\ ...\\\\ \\end{bmatrix} } = -\\underbrace{ \\begin{bmatrix} \\sum {i=1}^n d_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\\\ \\sum_{i=1}^n nx_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\\\ \\sum_{i=1}^n ny_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\\\ \\sum_{i=1}^n nz_i \\cdot (\\Delta x_i nx_i + \\Delta y_i ny_i + \\Delta z_i nz_i) \\end{bmatrix} }_{(4\\times1)} $$","title":"details"},{"location":"M%26L/slam_basic/","text":"\u4e09\u7ef4\u521a\u4f53\u8fd0\u52a8 \u56db\u5143\u6570\u7684\u5171\u8f6dconjugate \u5373\u4e3a\u5176\u81ea\u8eab\u7684\u9006 $$ T = \\begin{bmatrix} R & t \\\\ 0^T & 1 \\end{bmatrix} \\quad R^T = R^{-1} \\qquad \\rightarrow \\qquad T^{-1} = \\begin{bmatrix} R^T & -R^Tt \\\\ 0^T & 1 \\end{bmatrix} $$ \u53cd\u5bf9\u79f0\u77e9\u9635 $$ \\begin{aligned} \\mathbf{\\overrightarrow{a}}\\times\\mathbf{\\overrightarrow{b}} &= \\begin{bmatrix} \\mathbf{i} & \\mathbf{j}& \\mathbf{k}\\\\ a_1 & a_2 &a_3\\\\ b_1 & b_2 &b_3 \\end{bmatrix} \\\\ &=\\begin{bmatrix} a_2b_3 - a_3b_2 \\\\ a_3b_1 - a_1b_3 \\\\ a_1b_2 - a_2b_1 \\end{bmatrix}\\\\ &= \\begin{bmatrix} 0 & -a_3 & a_2 \\\\ a_3 & 0 & -a_1 \\\\ -a_2 & a_1 & 0 \\end{bmatrix} .\\text{\u5373\u4e3aa\u7684\u53cd\u5bf9\u79f0\u77e9\u9635} \\\\ &=\\hat{\\mathbf{a}}\\mathbf{k} \\end{aligned} \\tag{4} $$ Camera \u50cf\u7d20\u5750\u6807 (u, v) \u548c\u76f8\u673a\u5750\u6807 (X, Y, Z) \u7684\u8f6c\u6362\u63a8\u5bfc $$ \\begin{bmatrix} u \\\\ v \\\\ 1 \\end{bmatrix} = \\frac{1}{Z} \\begin{bmatrix} f_x & 0 & cx \\\\ 0 & f_y & cy \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} X \\\\ Y \\\\ 1 \\end{bmatrix} = \\frac{1}{Z} \\cdot KP_c = \\frac{1}{Z} \\cdot KT P_w $$ K\u4e3a\u76f8\u673a\u5185\u53c2\u77e9\u9635\uff0c $T$\u4e3a\u8def\u6807\u70b9$P_w$\u5bf9\u5e94\u7684\u5916\u53c2(\u7528\u4e8e\u5148\u5c06\u8def\u6807\u70b9\u7531\u4e16\u754c\u7cfb\u8f6c\u5230 \u76f8\u673a\u7cfb ,\u5373$P_c = RP_w +t$), \u5f52\u4e00\u5316\u76f8\u673a\u5750\u6807: $P_c = (\\frac{X}{Z}, \\frac{Y}{Z},1)$, \u50cf\u7d20\u5750\u6807:$P_{uv} = KP_c$ $$ \\begin{cases} u = \\alpha X^\\prime +cx \\\\ v = \\beta Y^\\prime + cy \\quad cx\u548ccy\u7684\u57fa\u672c\u5355\u4f4d:pixel \\end{cases} \\rightarrow \\begin{cases} u = \\alpha \\cdot f \\cdot \\frac{X}{Z} + cx \\\\ v = \\beta \\cdot f \\cdot \\frac{Y}{Z} + cy \\quad \\alpha\u548c\\beta\u7684\u57fa\u672c\u5355\u4f4d:pixels/m \\end{cases} \\rightarrow \\begin{cases} u = f_x \\cdot \\frac{X}{Z} +cx \\\\ v = f_y \\cdot \\frac{Y}{Z} +cy \\end{cases} $$ - \u53cc\u76ee $$ Z = \\frac{fb}{d} \\qquad \u89c6\u5deed\u8d8a\u5c0f \\to Z\u8d8a\u5927,\u5373\u6d4b\u8ddd\u8d8a\u8fdc\uff0c\u540c\u7406\u57fa\u7ebfb\u8d8a\u5927\u4e5f\u662f\u5982\u6b64 $$ \u89c6\u89c9\u91cc\u7a0b\u8ba1 2D-2D\u5bf9\u6781\u51e0\u4f55(\u8ba1\u7b97\u6c42\u89e3: \u65cb\u8f6cR \u548c \u5e73\u79fbt) $$ x^T_2 \\hat{t} R x_1 = 0 \\qquad x_2\u548cx_1\u4e3a\u76f8\u673a\u5f52\u4e00\u5316\u5750\u6807 \\ \u672c\u8d28\u77e9\u9635 E =\\hat{t} R \\\\ P^T_2 K^{-T} \\hat{t} R K^{-1} P_1 = 0 \\qquad \u57fa\u7840\u77e9\u9635 F = K^{-T} \\hat{t} R K^{-1} $$ \u672c\u8d28\u77e9\u9635$E$\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0b\u7b49\u4ef7,\u56e0\u6b64\u4e0e\u5c3a\u5ea6\u65e0\u5173\u3002 \u7279\u5f81\u70b9\u5171\u9762\u6216\u76f8\u673a\u7eaf\u65cb\u8f6c\u65f6$E$\u7684\u81ea\u7531\u5ea6\u4e0b\u964d,\u5373\u9000\u5316,\u56e0\u6b64\u4e00\u822c\u540c\u65f6\u4f30\u8ba1\u57fa\u7840\u77e9\u9635$F$\u548c\u5355\u5e94\u6027\u77e9\u9635$H$,\u9009\u53d6\u91cd\u6295\u5f71\u8bef\u5dee\u6bd4\u8f83\u5c0f\u7684\u4f5c\u4e3a\u6700\u7ec8\u7684\u8fd0\u52a8\u4f30\u8ba1\u77e9\u9635\u3002 \u5355\u76eeslam\u521d\u59cb\u5316[\u65cb\u8f6c+\u5e73\u79fb]: \u76842\u4e2aimage must \u6709\u4e00\u5b9a\u7684\u5e73\u79fb\u91cf,\u800c\u540e\u7684\u8f68\u8ff9\u548c\u5730\u56fe\u90fd\u4ee5\u6b64\u4e3a\u5355\u4f4d \u4e09\u89d2\u5316\u6d4b\u91cf(\u8ba1\u7b97\u6c42\u89e3: \u8def\u6807\u70b9\u5373\u5730\u56fe\u70b9\u7684\u7a7a\u95f4\u4f4d\u7f6e) $$ s_1 x_1 = s_2 R x_2 + t $$ \u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58 \u72b6\u6001\u4f30\u8ba1 \u673a\u5668\u4eba\u72b6\u6001\u4f30\u8ba1\u4e2d\u5df2\u77e5\u8f93\u5165\u6570\u636e $\\mathcal{u}$ \u548c\u89c2\u6d4b\u6570\u636e $\\mathcal{x}$ \u7684\u6761\u4ef6\u4e0b, \u672a\u77e5\u72b6\u6001 $x$ \u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u4e3a: $P(x|z,u)$, \u5f53\u6ca1\u6709\u6d4b\u91cf\u8fd0\u52a8\u7684\u4f20\u611f\u5668\u65f6\u76f8\u5f53\u4e8e\u4f30\u8ba1$P(x|z)$ \u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03(\u82e5\u5ffd\u7565\u65f6\u5e8f\u5173\u7cfb\u5219\u53ef\u7406\u89e3\u4e3a\u4e00\u4e2aSFM\u95ee\u9898) \u6c42\u6700\u5927\u540e\u9a8c $\\simeq$ \u6c42\u6700\u5927\u4f3c\u7136\u4f30\u8ba1 $\\to$ \u6700\u5c0f\u5316\u8d1f\u5bf9\u6570(\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898) - \u5229\u7528\u8d1d\u53f6\u65af\u6cd5\u5219 $$ P(x|z) = \\frac{P(z|x)P(x)}{P(z)} \\propto P(z|x)P(x) $$ $$ \u540e\u9a8cP(x|z) * \u5e38\u6570(evidence)P(z)= \u4f3c\u7136(likelihood)P(z|x) * \u5148\u9a8cP(x) $$ - \u6700\u5927\u5316\u540e\u9a8c\u6982\u7387(Maximize a Posterior,MAP): $$ x^ _{MAP} = argmax P(x|z) = argmax P(z|x)P(x) $$ - \u4e00\u822c\u8fd8\u4e0d\u77e5\u9053\u673a\u5668\u4eba\u5927\u6982\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\u6ca1\u6709\u4e86 \u5148\u9a8c \u6240\u4ee5\u6c42 \u6700\u5927\u5316\u540e\u9a8c\u6982\u7387 \u76f8\u5f53\u4e8e\u6c42 $x$ \u7684 \u6700\u5927\u4f3c\u7136\u4f30\u8ba1 (Maximize Likelihood Estimation,MLE) \u4f3c\u7136:\u5728\u73b0\u5728\u7684\u59ff\u6001\u4e0b\uff0c\u53ef\u80fd\u4ea7\u751f\u4ec0\u4e48\u6837\u7684\u89c2\u6d4b\u6570\u636e \u6700\u5927\u4f3c\u7136\u4f30\u8ba1:\u4ec0\u4e48\u6837\u7684\u72b6\u6001\u4e0b\uff0c\u6700\u53ef\u80fd\u4ea7\u751f\u5f53\u524d\u7684\u89c2\u6d4b\u6570\u636e ---->\u7b49\u540c\u4e8e\u6c42\u6700\u5927\u540e\u9a8c $$ x^ {MLE} = argmax P(z|x) $$ - \u5bf9\u4e8e\u89c2\u6d4b\u6a21\u578b $z {k,j} = h(y_j, x_k) + v_{k,j}$, \u4f3c\u7136 $P(z|x) = N(h(y_j, x_k),Q_{k,j})$\u670d\u4ece\u9ad8\u65af\u5206\u5e03, - \u4e3a\u6700\u5927\u5316\u4f3c $x_k, y_j$, \u7136\u901a\u5e38\u4f7f\u7528 \u6700\u5c0f\u5316\u8d1f\u5bf9\u6570 \u6765\u6c42\u4e00\u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u6700\u5927\u4f3c\u7136 \u4e00\u822c\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u610f\u7684\u9ad8\u65af\u5206\u5e03 $x \\sim N(\\mu, \\Sigma)$, \u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570$P(x) = \\frac{1}{\\sqrt{(2\\pi)^N det(\\Sigma)}}exp\\left(-\\frac{1}{2}(x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\right)$ \u53d6\u5176\u8d1f\u5bf9\u6570\u4e3a: $-ln(P(x)) = \\frac{1}{2}ln\\left((2\\pi)^N det(\\Sigma)\\right) + \\frac{1}{2}(x - \\mu)^T \\Sigma^{-1} (x - \\mu)$ - \u8d1f\u5bf9\u6570\u5f0f \u7684\u7b2c\u4e00\u9879\u4e0e $x$ \u65e0\u5173\uff0c\u76f4\u63a5\u7565\u53bb, \u5219\u6c42\u72b6\u6001\u7684\u6700\u5927\u4f3c\u7136\u4f30\u8ba1-->\u6700\u5c0f\u5316\u53f3\u4fa7\u7684\u4e8c\u6b21\u578b\u9879\uff0c\u4ee3\u5165SLAM\u89c2\u6d4b\u6a21\u578b\uff0c\u7b49\u540c\u4e8e\u6c42 $x^* = argmin \\left((z_{k,j} - h(x_k, y_i))^T Q^{-1} {k,j} (z {k,j} - h(x_k, y_i)) \\right)$ \u7b49\u4ef7\u4e8e\u6c42\u566a\u58f0\u9879(\u5373\u8bef\u5dee)\u7684\u6700\u5c0f\u4e8c\u4e58 \u6700\u5c0f\u4e8c\u4e58\u95ee\u9898 $$ \\min\\limits_{x}\\frac{1}{2}|f(x)|^2 $$ \u672a\u77e5\u81ea\u53d8\u91cf$x \\isin \\mathbb{R}^n$,$f$\u4e3a\u4e00\u4e2a\u4efb\u610f\u7684\u975e\u7ebf\u6027\u51fd\u6570,\u5047\u8bbe\u4e3a$m$\u7ef4:$f(x) \\isin \\mathbb{R}^m$\u3002 - \u89e3\u6790\u5f62\u5f0f\u6c42\u89e3: \u4ee4\u76ee\u6807\u51fd\u6570\u5bfc\u6570\u4e3a\u96f6 $\\frac{df}{d \\mathbf{x}}=\\mathbf{0}$,\u7136\u540e\u6c42\u89e3$\\mathbf{x}$\u7684\u6700\u4f18\u89e3 - \u4f18\u5316\u6c42\u89e3:SLAM\u4e2d\u7684\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u5bfc\u6570\u5f62\u5f0f\u6bd4\u8f83\u590d\u6742\uff0c\u4f7f\u7528\u8fed\u4ee3\u7684\u65b9\u5f0f\u4ece\u4e00\u4e2a\u521d\u59cb\u503c\u51fa\u53d1\uff0c\u901a\u8fc7\u4e0d\u65ad\u8fed\u4ee3\u66f4\u65b0\u5f53\u524d\u7684\u4f18\u5316\u53d8\u91cf\u4f7f\u76ee\u6807\u51fd\u6570\u4e0b\u964d 1. \u7ed9\u5b9a\u67d0\u4e2a\u521d\u59cb\u503c$\\mathbf{x} 0$ 2. \u5bf9\u4e8e\u7b2c$\\mathcal{k}$\u6b21\u8fed\u4ee3\uff0c\u5bfb\u627e\u4e00\u4e2a\u589e\u91cf$\\Delta x_k$\uff0c\u4f7f\u5f97$|f(x_k + \\Delta x_k)|^2$\u8fbe\u5230\u6781\u5c0f\u503c 3. \u82e5$\\Delta x_k$\u8db3\u591f\u5c0f\uff0c\u5219\u505c\u6b62\u8fed\u4ee3 4. \u5426\u5219\uff0c\u4ee4$x {k+1} = x_k + \\Delta x_k$ - \u4e00\u9636\u548c\u4e8c\u9636\u68af\u5ea6\u6cd5 \u5c06\u76ee\u6807\u51fd\u6570\u5728 $x_k$ \u9644\u8fd1\u6cf0\u52d2\u5c55\u5f00 $$ f(x + \\Delta)^2 = f(x)^2 + J(x)\\Delta x + \\frac{1}{2} \\Delta x^T \\mathbin{H} \\Delta x $$ $J$ \u4e3a $f(x)^2$ \u5173\u4e8e $x$ \u7684\u5bfc\u6570(Jacobian\u77e9\u9635)\uff0c\u800c $H$ \u4e3a\u4e8c\u9636\u5bfc\u6570(Hessian\u77e9\u9635)\uff0c\u4fdd\u7559\u6cf0\u52d2\u5c55\u5f00\u7684\u4e00\u9636\u6216\u4e8c\u9636\u9879\u5bf9\u5e94\u7684\u6c42\u89e3\u65b9\u6cd5\u5219\u4e3a\u4e00\u9636\u68af\u5ea6\u6216\u4e8c\u9636\u68af\u5ea6 - \u4fdd\u7559\u4e00\u9636\u68af\u5ea6\uff0c\u589e\u91cf\u65b9\u7a0b\u4e3a $$ \\Delta x^ = -J(x) $$ \u76f4\u89c2\u610f\u4e49\u7b80\u5355\uff0c\u6cbf\u53cd\u5411\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\u5373\u53ef\uff0c\u901a\u5e38\u4f1a\u8ba1\u7b97\u8be5\u65b9\u5411\u4e0a\u7684\u4e00\u4e2a\u6b65\u957f $\\lambda$, \u4ee5\u83b7\u5f97\u6700\u5feb\u4e0b\u964d\u7684\u65b9\u5f0f---> \u6700\u901f\u4e0b\u964d\u6cd5 (\u8fc7\u4e8e\u8d2a\u5fc3,\u5bb9\u6613\u8d70\u952f\u9f7f\u8def\u7ebf\uff0c\u589e\u52a0\u8fed\u4ee3\u6b21\u6570) - \u4fdd\u7559\u4e8c\u9636\u68af\u5ea6\uff0c\u589e\u91cf\u65b9\u7a0b\u4e3a $$ \\Delta x^ = argminf(x)^2 +J(x) \\Delta x + \\frac{1}{2} \\Delta x^T \\mathbin{H} \\Delta x $$ \u8be5\u7b49\u5f0f\u4ee4\u5173\u4e8e $\\Delta x$ \u7684\u5bfc\u6570\u4e3a\u96f6\uff0c\u5f97\u589e\u91cf\u65b9\u7a0b\u4e3a: $H \\Delta x = -J $ \u725b\u987f\u6cd5 (\u9700\u8ba1\u7b97$H$\u77e9\u9635\uff0c\u4e00\u822c\u6bd4\u8f83\u56f0\u96be) - Gauss-Newton (\u6700\u4f18\u5316\u7b97\u6cd5\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u4e4b\u4e00, \u5c06$f(x)$\u8fdb\u884c\u4e00\u9636\u6cf0\u52d2\u5c55\u5f00\uff0c\u800c\u975e\u76ee\u6807\u51fd\u6570$f(x)^2$) $$ f(x + \\Delta x) \\approx f(x) + J(x)\\Delta x $$ \u8be5\u5f0f$J(x)$\u4e3a$f(x)$\u5173\u4e8e$x$\u7684\u5bfc\u6570\uff0c\u5f97\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u4e3a: $$ \\Delta x^ k = arg\\min\\limits {\\Delta x}\\frac{1}{2} |f(x) + J(x)\\Delta x|^2 $$ \u5c06\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u76ee\u6807\u51fd\u6570$|f(x) + J(x)\\Delta x|^2$\u5bf9$\\Delta x$\u6c42\u5bfc\u5e76\u4ee4\u5bfc\u6570\u4e3a\u96f6\u5f97 \u589e\u91cf\u65b9\u7a0b(\u9ad8\u65af\u725b\u987f\u65b9\u7a0bGaussNewtonEquations\u6216\u6b63\u89c4\u65b9\u7a0bNormalEquations) $$ J(x)^T J(x) \\Delta x = -J(x)f(x) \\sim H \\Delta x =g $$ Gauss-Newton\u5c06$J^T J$\u4f5c\u4e3a\u725b\u987f\u6cd5\u4e2d\u4e8c\u9636$Hessian$\u77e9\u9635\u7684\u8fd1\u4f3c\uff0c \u6c42\u89e3\u589e\u91cf\u65b9\u7a0b\u662f\u6574\u4e2a\u4f18\u5316\u95ee\u9898\u7684\u6838\u5fc3 * - Gauss-Newton\u7b97\u6cd5\u6b65\u9aa4 1. \u7ed9\u5b9a\u67d0\u4e2a\u521d\u59cb\u503c$x_0$ 2. \u5bf9\u4e8e\u7b2c$\\mathcal{k}$\u6b21\u8fed\u4ee3\uff0c\u6c42\u51fa\u5f53\u524d\u7684Jacobian\u77e9\u9635$J(x_k)$\u548c\u8bef\u5dee$f(x_k)$ 3. \u6c42\u89e3\u589e\u91cf\u65b9\u7a0b:$H \\Delta x =g$ 4. \u82e5$\\Delta x_k$\u8db3\u591f\u5c0f\uff0c\u5219\u505c\u6b62\u3002\u5426\u5219\uff0c\u4ee4$x_{k+1} = x_k + \\Delta x_k$,\u7136\u540e\u8fd4\u56de\u6b65\u9aa42","title":"Slam basic"},{"location":"M%26L/slam_basic/#_1","text":"\u56db\u5143\u6570\u7684\u5171\u8f6dconjugate \u5373\u4e3a\u5176\u81ea\u8eab\u7684\u9006 $$ T = \\begin{bmatrix} R & t \\\\ 0^T & 1 \\end{bmatrix} \\quad R^T = R^{-1} \\qquad \\rightarrow \\qquad T^{-1} = \\begin{bmatrix} R^T & -R^Tt \\\\ 0^T & 1 \\end{bmatrix} $$","title":"\u4e09\u7ef4\u521a\u4f53\u8fd0\u52a8"},{"location":"M%26L/slam_basic/#_2","text":"$$ \\begin{aligned} \\mathbf{\\overrightarrow{a}}\\times\\mathbf{\\overrightarrow{b}} &= \\begin{bmatrix} \\mathbf{i} & \\mathbf{j}& \\mathbf{k}\\\\ a_1 & a_2 &a_3\\\\ b_1 & b_2 &b_3 \\end{bmatrix} \\\\ &=\\begin{bmatrix} a_2b_3 - a_3b_2 \\\\ a_3b_1 - a_1b_3 \\\\ a_1b_2 - a_2b_1 \\end{bmatrix}\\\\ &= \\begin{bmatrix} 0 & -a_3 & a_2 \\\\ a_3 & 0 & -a_1 \\\\ -a_2 & a_1 & 0 \\end{bmatrix} .\\text{\u5373\u4e3aa\u7684\u53cd\u5bf9\u79f0\u77e9\u9635} \\\\ &=\\hat{\\mathbf{a}}\\mathbf{k} \\end{aligned} \\tag{4} $$","title":"\u53cd\u5bf9\u79f0\u77e9\u9635"},{"location":"M%26L/slam_basic/#camera","text":"\u50cf\u7d20\u5750\u6807 (u, v) \u548c\u76f8\u673a\u5750\u6807 (X, Y, Z) \u7684\u8f6c\u6362\u63a8\u5bfc $$ \\begin{bmatrix} u \\\\ v \\\\ 1 \\end{bmatrix} = \\frac{1}{Z} \\begin{bmatrix} f_x & 0 & cx \\\\ 0 & f_y & cy \\\\ 0 & 0 & 1 \\end{bmatrix} \\begin{bmatrix} X \\\\ Y \\\\ 1 \\end{bmatrix} = \\frac{1}{Z} \\cdot KP_c = \\frac{1}{Z} \\cdot KT P_w $$ K\u4e3a\u76f8\u673a\u5185\u53c2\u77e9\u9635\uff0c $T$\u4e3a\u8def\u6807\u70b9$P_w$\u5bf9\u5e94\u7684\u5916\u53c2(\u7528\u4e8e\u5148\u5c06\u8def\u6807\u70b9\u7531\u4e16\u754c\u7cfb\u8f6c\u5230 \u76f8\u673a\u7cfb ,\u5373$P_c = RP_w +t$), \u5f52\u4e00\u5316\u76f8\u673a\u5750\u6807: $P_c = (\\frac{X}{Z}, \\frac{Y}{Z},1)$, \u50cf\u7d20\u5750\u6807:$P_{uv} = KP_c$ $$ \\begin{cases} u = \\alpha X^\\prime +cx \\\\ v = \\beta Y^\\prime + cy \\quad cx\u548ccy\u7684\u57fa\u672c\u5355\u4f4d:pixel \\end{cases} \\rightarrow \\begin{cases} u = \\alpha \\cdot f \\cdot \\frac{X}{Z} + cx \\\\ v = \\beta \\cdot f \\cdot \\frac{Y}{Z} + cy \\quad \\alpha\u548c\\beta\u7684\u57fa\u672c\u5355\u4f4d:pixels/m \\end{cases} \\rightarrow \\begin{cases} u = f_x \\cdot \\frac{X}{Z} +cx \\\\ v = f_y \\cdot \\frac{Y}{Z} +cy \\end{cases} $$ - \u53cc\u76ee $$ Z = \\frac{fb}{d} \\qquad \u89c6\u5deed\u8d8a\u5c0f \\to Z\u8d8a\u5927,\u5373\u6d4b\u8ddd\u8d8a\u8fdc\uff0c\u540c\u7406\u57fa\u7ebfb\u8d8a\u5927\u4e5f\u662f\u5982\u6b64 $$","title":"Camera"},{"location":"M%26L/slam_basic/#_3","text":"2D-2D\u5bf9\u6781\u51e0\u4f55(\u8ba1\u7b97\u6c42\u89e3: \u65cb\u8f6cR \u548c \u5e73\u79fbt) $$ x^T_2 \\hat{t} R x_1 = 0 \\qquad x_2\u548cx_1\u4e3a\u76f8\u673a\u5f52\u4e00\u5316\u5750\u6807 \\ \u672c\u8d28\u77e9\u9635 E =\\hat{t} R \\\\ P^T_2 K^{-T} \\hat{t} R K^{-1} P_1 = 0 \\qquad \u57fa\u7840\u77e9\u9635 F = K^{-T} \\hat{t} R K^{-1} $$ \u672c\u8d28\u77e9\u9635$E$\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0b\u7b49\u4ef7,\u56e0\u6b64\u4e0e\u5c3a\u5ea6\u65e0\u5173\u3002 \u7279\u5f81\u70b9\u5171\u9762\u6216\u76f8\u673a\u7eaf\u65cb\u8f6c\u65f6$E$\u7684\u81ea\u7531\u5ea6\u4e0b\u964d,\u5373\u9000\u5316,\u56e0\u6b64\u4e00\u822c\u540c\u65f6\u4f30\u8ba1\u57fa\u7840\u77e9\u9635$F$\u548c\u5355\u5e94\u6027\u77e9\u9635$H$,\u9009\u53d6\u91cd\u6295\u5f71\u8bef\u5dee\u6bd4\u8f83\u5c0f\u7684\u4f5c\u4e3a\u6700\u7ec8\u7684\u8fd0\u52a8\u4f30\u8ba1\u77e9\u9635\u3002 \u5355\u76eeslam\u521d\u59cb\u5316[\u65cb\u8f6c+\u5e73\u79fb]: \u76842\u4e2aimage must \u6709\u4e00\u5b9a\u7684\u5e73\u79fb\u91cf,\u800c\u540e\u7684\u8f68\u8ff9\u548c\u5730\u56fe\u90fd\u4ee5\u6b64\u4e3a\u5355\u4f4d \u4e09\u89d2\u5316\u6d4b\u91cf(\u8ba1\u7b97\u6c42\u89e3: \u8def\u6807\u70b9\u5373\u5730\u56fe\u70b9\u7684\u7a7a\u95f4\u4f4d\u7f6e) $$ s_1 x_1 = s_2 R x_2 + t $$","title":"\u89c6\u89c9\u91cc\u7a0b\u8ba1"},{"location":"M%26L/slam_basic/#_4","text":"","title":"\u975e\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58"},{"location":"M%26L/slam_basic/#_5","text":"\u673a\u5668\u4eba\u72b6\u6001\u4f30\u8ba1\u4e2d\u5df2\u77e5\u8f93\u5165\u6570\u636e $\\mathcal{u}$ \u548c\u89c2\u6d4b\u6570\u636e $\\mathcal{x}$ \u7684\u6761\u4ef6\u4e0b, \u672a\u77e5\u72b6\u6001 $x$ \u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03\u4e3a: $P(x|z,u)$, \u5f53\u6ca1\u6709\u6d4b\u91cf\u8fd0\u52a8\u7684\u4f20\u611f\u5668\u65f6\u76f8\u5f53\u4e8e\u4f30\u8ba1$P(x|z)$ \u7684\u6761\u4ef6\u6982\u7387\u5206\u5e03(\u82e5\u5ffd\u7565\u65f6\u5e8f\u5173\u7cfb\u5219\u53ef\u7406\u89e3\u4e3a\u4e00\u4e2aSFM\u95ee\u9898) \u6c42\u6700\u5927\u540e\u9a8c $\\simeq$ \u6c42\u6700\u5927\u4f3c\u7136\u4f30\u8ba1 $\\to$ \u6700\u5c0f\u5316\u8d1f\u5bf9\u6570(\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898) - \u5229\u7528\u8d1d\u53f6\u65af\u6cd5\u5219 $$ P(x|z) = \\frac{P(z|x)P(x)}{P(z)} \\propto P(z|x)P(x) $$ $$ \u540e\u9a8cP(x|z) * \u5e38\u6570(evidence)P(z)= \u4f3c\u7136(likelihood)P(z|x) * \u5148\u9a8cP(x) $$ - \u6700\u5927\u5316\u540e\u9a8c\u6982\u7387(Maximize a Posterior,MAP): $$ x^ _{MAP} = argmax P(x|z) = argmax P(z|x)P(x) $$ - \u4e00\u822c\u8fd8\u4e0d\u77e5\u9053\u673a\u5668\u4eba\u5927\u6982\u7684\u4f4d\u7f6e\uff0c\u6b64\u65f6\u6ca1\u6709\u4e86 \u5148\u9a8c \u6240\u4ee5\u6c42 \u6700\u5927\u5316\u540e\u9a8c\u6982\u7387 \u76f8\u5f53\u4e8e\u6c42 $x$ \u7684 \u6700\u5927\u4f3c\u7136\u4f30\u8ba1 (Maximize Likelihood Estimation,MLE) \u4f3c\u7136:\u5728\u73b0\u5728\u7684\u59ff\u6001\u4e0b\uff0c\u53ef\u80fd\u4ea7\u751f\u4ec0\u4e48\u6837\u7684\u89c2\u6d4b\u6570\u636e \u6700\u5927\u4f3c\u7136\u4f30\u8ba1:\u4ec0\u4e48\u6837\u7684\u72b6\u6001\u4e0b\uff0c\u6700\u53ef\u80fd\u4ea7\u751f\u5f53\u524d\u7684\u89c2\u6d4b\u6570\u636e ---->\u7b49\u540c\u4e8e\u6c42\u6700\u5927\u540e\u9a8c $$ x^ {MLE} = argmax P(z|x) $$ - \u5bf9\u4e8e\u89c2\u6d4b\u6a21\u578b $z {k,j} = h(y_j, x_k) + v_{k,j}$, \u4f3c\u7136 $P(z|x) = N(h(y_j, x_k),Q_{k,j})$\u670d\u4ece\u9ad8\u65af\u5206\u5e03, - \u4e3a\u6700\u5927\u5316\u4f3c $x_k, y_j$, \u7136\u901a\u5e38\u4f7f\u7528 \u6700\u5c0f\u5316\u8d1f\u5bf9\u6570 \u6765\u6c42\u4e00\u4e2a\u9ad8\u65af\u5206\u5e03\u7684\u6700\u5927\u4f3c\u7136 \u4e00\u822c\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4efb\u610f\u7684\u9ad8\u65af\u5206\u5e03 $x \\sim N(\\mu, \\Sigma)$, \u5176\u6982\u7387\u5bc6\u5ea6\u51fd\u6570$P(x) = \\frac{1}{\\sqrt{(2\\pi)^N det(\\Sigma)}}exp\\left(-\\frac{1}{2}(x - \\mu)^T \\Sigma^{-1} (x - \\mu)\\right)$ \u53d6\u5176\u8d1f\u5bf9\u6570\u4e3a: $-ln(P(x)) = \\frac{1}{2}ln\\left((2\\pi)^N det(\\Sigma)\\right) + \\frac{1}{2}(x - \\mu)^T \\Sigma^{-1} (x - \\mu)$ - \u8d1f\u5bf9\u6570\u5f0f \u7684\u7b2c\u4e00\u9879\u4e0e $x$ \u65e0\u5173\uff0c\u76f4\u63a5\u7565\u53bb, \u5219\u6c42\u72b6\u6001\u7684\u6700\u5927\u4f3c\u7136\u4f30\u8ba1-->\u6700\u5c0f\u5316\u53f3\u4fa7\u7684\u4e8c\u6b21\u578b\u9879\uff0c\u4ee3\u5165SLAM\u89c2\u6d4b\u6a21\u578b\uff0c\u7b49\u540c\u4e8e\u6c42 $x^* = argmin \\left((z_{k,j} - h(x_k, y_i))^T Q^{-1} {k,j} (z {k,j} - h(x_k, y_i)) \\right)$ \u7b49\u4ef7\u4e8e\u6c42\u566a\u58f0\u9879(\u5373\u8bef\u5dee)\u7684\u6700\u5c0f\u4e8c\u4e58","title":"\u72b6\u6001\u4f30\u8ba1"},{"location":"M%26L/slam_basic/#_6","text":"$$ \\min\\limits_{x}\\frac{1}{2}|f(x)|^2 $$ \u672a\u77e5\u81ea\u53d8\u91cf$x \\isin \\mathbb{R}^n$,$f$\u4e3a\u4e00\u4e2a\u4efb\u610f\u7684\u975e\u7ebf\u6027\u51fd\u6570,\u5047\u8bbe\u4e3a$m$\u7ef4:$f(x) \\isin \\mathbb{R}^m$\u3002 - \u89e3\u6790\u5f62\u5f0f\u6c42\u89e3: \u4ee4\u76ee\u6807\u51fd\u6570\u5bfc\u6570\u4e3a\u96f6 $\\frac{df}{d \\mathbf{x}}=\\mathbf{0}$,\u7136\u540e\u6c42\u89e3$\\mathbf{x}$\u7684\u6700\u4f18\u89e3 - \u4f18\u5316\u6c42\u89e3:SLAM\u4e2d\u7684\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u5bfc\u6570\u5f62\u5f0f\u6bd4\u8f83\u590d\u6742\uff0c\u4f7f\u7528\u8fed\u4ee3\u7684\u65b9\u5f0f\u4ece\u4e00\u4e2a\u521d\u59cb\u503c\u51fa\u53d1\uff0c\u901a\u8fc7\u4e0d\u65ad\u8fed\u4ee3\u66f4\u65b0\u5f53\u524d\u7684\u4f18\u5316\u53d8\u91cf\u4f7f\u76ee\u6807\u51fd\u6570\u4e0b\u964d 1. \u7ed9\u5b9a\u67d0\u4e2a\u521d\u59cb\u503c$\\mathbf{x} 0$ 2. \u5bf9\u4e8e\u7b2c$\\mathcal{k}$\u6b21\u8fed\u4ee3\uff0c\u5bfb\u627e\u4e00\u4e2a\u589e\u91cf$\\Delta x_k$\uff0c\u4f7f\u5f97$|f(x_k + \\Delta x_k)|^2$\u8fbe\u5230\u6781\u5c0f\u503c 3. \u82e5$\\Delta x_k$\u8db3\u591f\u5c0f\uff0c\u5219\u505c\u6b62\u8fed\u4ee3 4. \u5426\u5219\uff0c\u4ee4$x {k+1} = x_k + \\Delta x_k$ - \u4e00\u9636\u548c\u4e8c\u9636\u68af\u5ea6\u6cd5 \u5c06\u76ee\u6807\u51fd\u6570\u5728 $x_k$ \u9644\u8fd1\u6cf0\u52d2\u5c55\u5f00 $$ f(x + \\Delta)^2 = f(x)^2 + J(x)\\Delta x + \\frac{1}{2} \\Delta x^T \\mathbin{H} \\Delta x $$ $J$ \u4e3a $f(x)^2$ \u5173\u4e8e $x$ \u7684\u5bfc\u6570(Jacobian\u77e9\u9635)\uff0c\u800c $H$ \u4e3a\u4e8c\u9636\u5bfc\u6570(Hessian\u77e9\u9635)\uff0c\u4fdd\u7559\u6cf0\u52d2\u5c55\u5f00\u7684\u4e00\u9636\u6216\u4e8c\u9636\u9879\u5bf9\u5e94\u7684\u6c42\u89e3\u65b9\u6cd5\u5219\u4e3a\u4e00\u9636\u68af\u5ea6\u6216\u4e8c\u9636\u68af\u5ea6 - \u4fdd\u7559\u4e00\u9636\u68af\u5ea6\uff0c\u589e\u91cf\u65b9\u7a0b\u4e3a $$ \\Delta x^ = -J(x) $$ \u76f4\u89c2\u610f\u4e49\u7b80\u5355\uff0c\u6cbf\u53cd\u5411\u68af\u5ea6\u65b9\u5411\u524d\u8fdb\u5373\u53ef\uff0c\u901a\u5e38\u4f1a\u8ba1\u7b97\u8be5\u65b9\u5411\u4e0a\u7684\u4e00\u4e2a\u6b65\u957f $\\lambda$, \u4ee5\u83b7\u5f97\u6700\u5feb\u4e0b\u964d\u7684\u65b9\u5f0f---> \u6700\u901f\u4e0b\u964d\u6cd5 (\u8fc7\u4e8e\u8d2a\u5fc3,\u5bb9\u6613\u8d70\u952f\u9f7f\u8def\u7ebf\uff0c\u589e\u52a0\u8fed\u4ee3\u6b21\u6570) - \u4fdd\u7559\u4e8c\u9636\u68af\u5ea6\uff0c\u589e\u91cf\u65b9\u7a0b\u4e3a $$ \\Delta x^ = argminf(x)^2 +J(x) \\Delta x + \\frac{1}{2} \\Delta x^T \\mathbin{H} \\Delta x $$ \u8be5\u7b49\u5f0f\u4ee4\u5173\u4e8e $\\Delta x$ \u7684\u5bfc\u6570\u4e3a\u96f6\uff0c\u5f97\u589e\u91cf\u65b9\u7a0b\u4e3a: $H \\Delta x = -J $ \u725b\u987f\u6cd5 (\u9700\u8ba1\u7b97$H$\u77e9\u9635\uff0c\u4e00\u822c\u6bd4\u8f83\u56f0\u96be) - Gauss-Newton (\u6700\u4f18\u5316\u7b97\u6cd5\u6700\u7b80\u5355\u7684\u65b9\u6cd5\u4e4b\u4e00, \u5c06$f(x)$\u8fdb\u884c\u4e00\u9636\u6cf0\u52d2\u5c55\u5f00\uff0c\u800c\u975e\u76ee\u6807\u51fd\u6570$f(x)^2$) $$ f(x + \\Delta x) \\approx f(x) + J(x)\\Delta x $$ \u8be5\u5f0f$J(x)$\u4e3a$f(x)$\u5173\u4e8e$x$\u7684\u5bfc\u6570\uff0c\u5f97\u7ebf\u6027\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u4e3a: $$ \\Delta x^ k = arg\\min\\limits {\\Delta x}\\frac{1}{2} |f(x) + J(x)\\Delta x|^2 $$ \u5c06\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898\u7684\u76ee\u6807\u51fd\u6570$|f(x) + J(x)\\Delta x|^2$\u5bf9$\\Delta x$\u6c42\u5bfc\u5e76\u4ee4\u5bfc\u6570\u4e3a\u96f6\u5f97 \u589e\u91cf\u65b9\u7a0b(\u9ad8\u65af\u725b\u987f\u65b9\u7a0bGaussNewtonEquations\u6216\u6b63\u89c4\u65b9\u7a0bNormalEquations) $$ J(x)^T J(x) \\Delta x = -J(x)f(x) \\sim H \\Delta x =g $$ Gauss-Newton\u5c06$J^T J$\u4f5c\u4e3a\u725b\u987f\u6cd5\u4e2d\u4e8c\u9636$Hessian$\u77e9\u9635\u7684\u8fd1\u4f3c\uff0c \u6c42\u89e3\u589e\u91cf\u65b9\u7a0b\u662f\u6574\u4e2a\u4f18\u5316\u95ee\u9898\u7684\u6838\u5fc3 * - Gauss-Newton\u7b97\u6cd5\u6b65\u9aa4 1. \u7ed9\u5b9a\u67d0\u4e2a\u521d\u59cb\u503c$x_0$ 2. \u5bf9\u4e8e\u7b2c$\\mathcal{k}$\u6b21\u8fed\u4ee3\uff0c\u6c42\u51fa\u5f53\u524d\u7684Jacobian\u77e9\u9635$J(x_k)$\u548c\u8bef\u5dee$f(x_k)$ 3. \u6c42\u89e3\u589e\u91cf\u65b9\u7a0b:$H \\Delta x =g$ 4. \u82e5$\\Delta x_k$\u8db3\u591f\u5c0f\uff0c\u5219\u505c\u6b62\u3002\u5426\u5219\uff0c\u4ee4$x_{k+1} = x_k + \\Delta x_k$,\u7136\u540e\u8fd4\u56de\u6b65\u9aa42","title":"\u6700\u5c0f\u4e8c\u4e58\u95ee\u9898"},{"location":"Tools/usage_bazel/","text":"Usage Bazel bazel build bazel build //main:hello-world bazel build //offboard/.../pose_graph_mapping:test #debug\u7f16\u8bd1 bazel build //offboard/mapping/pose_graph_mapping/lidar_odometry:pm_test --compilation_mode=dbg \\ -s \\ #-s\u663e\u793a\u7f16\u8bd1\u7ec6\u8282 --config=asan #\u7f16\u8bd1\u5668\u914d\u7f6e,\u7f16\u8bd1\u76f8\u5bf9\u8f83\u6162,\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u4f1a\u63d0\u793a\u9519\u8bef\u4fe1\u606f(gdb\u542f\u52a8\u6b64\u65f6\u6ca1\u6709stack\u4fe1\u606f) #Run special GTest\"TEST(A, func1)\" ./bazel-bin/../test --gtest_filter=A.func1 bazel test ... -- -experimental/... bazel query //onboard/...|grep cpplint$|xargs bazel test bazel query //offboard/...|grep cpplint$|xargs bazel test \u7f16\u8bd1\u5e76\u81ea\u52a8\u8fd0\u884c sh bazel run -c opt offboard/mapping/pose_graph_mapping/match_visualization/match_visualization_main -- \\ --run_name=20210513_101822_Q8007 --start_time=3928 \\ --run_name2=20210514_160135_Q8007 --start_time2=1509 \\ --use_smooth \\ --map=wuhan_dongfeng \\ --read_params_from_txt_file=true \\ --gnss_strict_good \\ --vantage_server_addr=0.0.0.0:65001 #\u5148\u542f\u52a8vantage","title":"Usage Bazel"},{"location":"Tools/usage_bazel/#usage-bazel","text":"","title":"Usage Bazel"},{"location":"Tools/usage_bazel/#bazel-build","text":"bazel build //main:hello-world bazel build //offboard/.../pose_graph_mapping:test #debug\u7f16\u8bd1 bazel build //offboard/mapping/pose_graph_mapping/lidar_odometry:pm_test --compilation_mode=dbg \\ -s \\ #-s\u663e\u793a\u7f16\u8bd1\u7ec6\u8282 --config=asan #\u7f16\u8bd1\u5668\u914d\u7f6e,\u7f16\u8bd1\u76f8\u5bf9\u8f83\u6162,\u76f4\u63a5\u8fd0\u884c\u7a0b\u5e8f\u4f1a\u63d0\u793a\u9519\u8bef\u4fe1\u606f(gdb\u542f\u52a8\u6b64\u65f6\u6ca1\u6709stack\u4fe1\u606f) #Run special GTest\"TEST(A, func1)\" ./bazel-bin/../test --gtest_filter=A.func1 bazel test ... -- -experimental/... bazel query //onboard/...|grep cpplint$|xargs bazel test bazel query //offboard/...|grep cpplint$|xargs bazel test \u7f16\u8bd1\u5e76\u81ea\u52a8\u8fd0\u884c sh bazel run -c opt offboard/mapping/pose_graph_mapping/match_visualization/match_visualization_main -- \\ --run_name=20210513_101822_Q8007 --start_time=3928 \\ --run_name2=20210514_160135_Q8007 --start_time2=1509 \\ --use_smooth \\ --map=wuhan_dongfeng \\ --read_params_from_txt_file=true \\ --gnss_strict_good \\ --vantage_server_addr=0.0.0.0:65001 #\u5148\u542f\u52a8vantage","title":"bazel build"},{"location":"Tools/usage_shortcut/","text":"usage of linux and vscode\u3001other common develop tools linux system vim(TODO,Need to test) Nowdays we spend a lot of time in bash shell, typing long and complex commands. You can use the arrow keys up/down/left/right to move the cursor and select commands, but that's not so efficient. | info | cmd | | :-------------------------- | :------------------------------------------------ | | Move in Charactor: back | C+b : Move back one charactor( C is for Ctrl ) | | Move in Charactor: forward | C+f : Move forward | | Move in Word: forward | Alt+f | | Move in Word: backward | Alt+b | | Move in Line: | | Terminator Shortcuts Usage shortcuts info ctrl+shift+o split windows horizontal ctrl+shift+e split windows vertical ctrl+shift+x switch between current window and all windows ctrl+shift+arrows move splitter bars of current working window alt+arrows switch between different working windows ctrl+shift+w close current window ctrl+shift+q close all window,that means close current terminator VsCode \u63d2\u4ef6\u4f7f\u7528\u53ca\u914d\u7f6e \u65e5\u5e38\u63d2\u4ef6 \u529f\u80fd \u914d\u7f6e\u53ca\u4f7f\u7528 Settings Sync \u5907\u4efdvscode\u914d\u7f6e\u53ca\u63d2\u4ef6 Sync Gist\u914d\u7f6e 1. GitHub GIST ID:vscode\u5185\u63d2\u4ef6setting (github gist repo\u7684url\u6570\u5b57\u90e8\u5206) 2. GitHub Token: /home/lyu/.config/Code/User/syncLocalSettings.json \u91cc\u9762token Upload: shift+alt+u Download:shift+alt+d ## Shortcuts Usage >\u8bbe\u7f6e\u4f4d\u7f6e: File->Preferences->Keyboard Shortcuts \u5e38\u7528\u8bbe\u7f6e info shortcuts \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus above editor group alt+i \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus below editor group alt+k \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus left editor group alt+j \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus right editor group alt+l \u7a97\u53e3\u5185\u6587\u4ef6\u5207\u6362:\u5de6\u4fa7\u6587\u4ef6 ctrl+pageUp \u7a97\u53e3\u5185\u6587\u4ef6\u5207\u6362:\u53f3\u4fa7\u6587\u4ef6 ctrl+pageDown \u5173\u95ed: \u5f53\u524d\u6587\u4ef6 ctrl+w \u5173\u95ed: vscode ctrl+shift+w go back alt+a go Forward alt+q page up alt+w page down alt+s cursor left ctrl+shift+j-useless cursor right ctrl+shift+l-useless cursor up ctrl+shift+i-useless cursor down ctrl+shift+k-useless cursorColumnSelectLeft alt+shift+j-useless cursorColumnSelectRight alt+shift+l-useless cursorColumnSelectUp alt+shift+i-useless cursorColumnSelectDown alt+shift+k-useless","title":"Shortcuts and Config Usage of linux and vscode"},{"location":"Tools/usage_shortcut/#linux-system","text":"","title":"linux system"},{"location":"Tools/usage_shortcut/#vimtodoneed-to-test","text":"Nowdays we spend a lot of time in bash shell, typing long and complex commands. You can use the arrow keys up/down/left/right to move the cursor and select commands, but that's not so efficient. | info | cmd | | :-------------------------- | :------------------------------------------------ | | Move in Charactor: back | C+b : Move back one charactor( C is for Ctrl ) | | Move in Charactor: forward | C+f : Move forward | | Move in Word: forward | Alt+f | | Move in Word: backward | Alt+b | | Move in Line: | |","title":"vim(TODO,Need to test)"},{"location":"Tools/usage_shortcut/#terminator-shortcuts-usage","text":"shortcuts info ctrl+shift+o split windows horizontal ctrl+shift+e split windows vertical ctrl+shift+x switch between current window and all windows ctrl+shift+arrows move splitter bars of current working window alt+arrows switch between different working windows ctrl+shift+w close current window ctrl+shift+q close all window,that means close current terminator","title":"Terminator Shortcuts Usage"},{"location":"Tools/usage_shortcut/#vscode","text":"","title":"VsCode"},{"location":"Tools/usage_shortcut/#_1","text":"\u65e5\u5e38\u63d2\u4ef6 \u529f\u80fd \u914d\u7f6e\u53ca\u4f7f\u7528 Settings Sync \u5907\u4efdvscode\u914d\u7f6e\u53ca\u63d2\u4ef6 Sync Gist\u914d\u7f6e 1. GitHub GIST ID:vscode\u5185\u63d2\u4ef6setting (github gist repo\u7684url\u6570\u5b57\u90e8\u5206) 2. GitHub Token: /home/lyu/.config/Code/User/syncLocalSettings.json \u91cc\u9762token Upload: shift+alt+u Download:shift+alt+d ## Shortcuts Usage >\u8bbe\u7f6e\u4f4d\u7f6e: File->Preferences->Keyboard Shortcuts \u5e38\u7528\u8bbe\u7f6e info shortcuts \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus above editor group alt+i \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus below editor group alt+k \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus left editor group alt+j \u6d3b\u52a8\u7a97\u53e3\u5207\u6362:view focus right editor group alt+l \u7a97\u53e3\u5185\u6587\u4ef6\u5207\u6362:\u5de6\u4fa7\u6587\u4ef6 ctrl+pageUp \u7a97\u53e3\u5185\u6587\u4ef6\u5207\u6362:\u53f3\u4fa7\u6587\u4ef6 ctrl+pageDown \u5173\u95ed: \u5f53\u524d\u6587\u4ef6 ctrl+w \u5173\u95ed: vscode ctrl+shift+w go back alt+a go Forward alt+q page up alt+w page down alt+s cursor left ctrl+shift+j-useless cursor right ctrl+shift+l-useless cursor up ctrl+shift+i-useless cursor down ctrl+shift+k-useless cursorColumnSelectLeft alt+shift+j-useless cursorColumnSelectRight alt+shift+l-useless cursorColumnSelectUp alt+shift+i-useless cursorColumnSelectDown alt+shift+k-useless","title":"\u63d2\u4ef6\u4f7f\u7528\u53ca\u914d\u7f6e"},{"location":"Tools/workspace_setup_ubuntu/","text":"Setup worksapce in ubuntu environment: ubuntu18.04 VPN v2ray(ref doc of yongcong) sudo apt install python3-pip sudo pip3 install shadowsocks #replace \"EVP_CIPHER_CTX_cleanup\" with \"EVP_CIPHER_CTX_reset\" of openssl.py by \":%s/old/new/g\" sudo vi /usr/local/lib/python3.8/dist-packages/shadowsocks/crypto/openssl.py sslocal -c shadowsocks_vpn_jikess.json the content of shadowsocks_vpn_jikess.json is: { \"server\":\"tw-1.v2speed.net\", \"server_port\":13871, \"local_port\":1080, \"password\":\"4UlcsiptpO\", \"timeout\":600, \"method\":\"aes-256-cfb\" } vim vim\u9ed8\u8ba4\u663e\u793a\u884c\u6570\u8bbe\u7f6e /etc/vim/vimrc \u7684\u6700\u540e\u4e00\u884c\u52a0\u4e0a :set number vscode sync setting.json extensions.json keybindingsMac.json - \u5b89\u88c5\u63d2\u4ef6\u53caGoogle\u4ee3\u7801\u98ce\u683c\u4fdd\u5b58\u81ea\u52a8\u683c\u5f0f\u5316 #************************* #@desc:c++ devel-env and autoformat by GoogleStyle #************************* #step1.install extensions:`C/C++\u3001Clang-Format\u3001` #step2.install executable clang-format sudo apt-get install clang-format #step3.config \"clang-format\" Settings\u641c\u7d22\"clang-format\",\u914d\u7f6e\"Clang-format:Fallback Style\"\u4e3a\"Google\u5373\u53ef\" \"clang-format.fallbackStyle\": \"Google\" #setting #step3.config autoformat when save the file #required: To automatically format a file on save, add the following to your vscode settings.json file \"editor.formatOnSave\": true #optional: \"clang-format.executable\": \"/absolute/path/to/clang-format\" \u6dfb\u52a0\u5934\u6587\u4ef6\u8def\u5f84 \u6309F1\u6216 Ctrl+Shift+p \u5728\u5f39\u51fa\u7684\u5907\u9009\u9009\u9879\u4e2d\u9009\u62e9 C/C++:Edit Configuration(JSON)\uff0c\u81ea\u52a8\u6253\u5f00c_cpp_properties.json FAQ [ \u4ee3\u7801\u81ea\u52a8\u8df3\u8f6c\u5931\u8d25 ]\"Visual Studio Code is unable to watch for file changes in this large workspace\" solution /etc/sysctl.conf \u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\u52a0\u5165 fs.inotify.max_user_watches=524288 vscode\u7684\u6587\u4ef6\u76d1\u542c\u6570\u76ee,\u7136\u540e sudo sysctl -p \u91cd\u542f\u5373\u53ef \u81ea\u52a8\u8df3\u8f6c\u65e0\u6548 C/C++\u63d2\u4ef6\u8bbe\u7f6e \"C_Cpp.intelliSenseEngine\": \"Default\" , \u4e4b\u524d setting.json \u8bef\u64cd\u4f5c\u4e3aDisabled, fuck!!! git sudo apt install git # config git config --global user.name \"YongcongWang\" git config --global user.email \"yongcong.wang@outlook.com\" git config --global core.editor vim # generate key ssh-keygen -t rsa -C \"yongcong.wang@outlook.com\" Config Open github and sign in; In Settings/SSH and GPG keys click New SSH Key ; Paste id_rsa.PUB (in /home/.ssh/id_rsa.pub ); Test: ssh -T git@github.com .","title":"Setup worksapce in ubuntu"},{"location":"Tools/workspace_setup_ubuntu/#setup-worksapce-in-ubuntu","text":"environment: ubuntu18.04","title":"Setup worksapce in ubuntu"},{"location":"Tools/workspace_setup_ubuntu/#vpn","text":"","title":"VPN"},{"location":"Tools/workspace_setup_ubuntu/#v2rayref-doc-of-yongcong","text":"","title":"v2ray(ref doc of yongcong)"},{"location":"Tools/workspace_setup_ubuntu/#_1","text":"sudo apt install python3-pip sudo pip3 install shadowsocks #replace \"EVP_CIPHER_CTX_cleanup\" with \"EVP_CIPHER_CTX_reset\" of openssl.py by \":%s/old/new/g\" sudo vi /usr/local/lib/python3.8/dist-packages/shadowsocks/crypto/openssl.py sslocal -c shadowsocks_vpn_jikess.json the content of shadowsocks_vpn_jikess.json is: { \"server\":\"tw-1.v2speed.net\", \"server_port\":13871, \"local_port\":1080, \"password\":\"4UlcsiptpO\", \"timeout\":600, \"method\":\"aes-256-cfb\" }","title":""},{"location":"Tools/workspace_setup_ubuntu/#vim","text":"vim\u9ed8\u8ba4\u663e\u793a\u884c\u6570\u8bbe\u7f6e /etc/vim/vimrc \u7684\u6700\u540e\u4e00\u884c\u52a0\u4e0a :set number","title":"vim"},{"location":"Tools/workspace_setup_ubuntu/#vscode","text":"sync setting.json extensions.json keybindingsMac.json - \u5b89\u88c5\u63d2\u4ef6\u53caGoogle\u4ee3\u7801\u98ce\u683c\u4fdd\u5b58\u81ea\u52a8\u683c\u5f0f\u5316 #************************* #@desc:c++ devel-env and autoformat by GoogleStyle #************************* #step1.install extensions:`C/C++\u3001Clang-Format\u3001` #step2.install executable clang-format sudo apt-get install clang-format #step3.config \"clang-format\" Settings\u641c\u7d22\"clang-format\",\u914d\u7f6e\"Clang-format:Fallback Style\"\u4e3a\"Google\u5373\u53ef\" \"clang-format.fallbackStyle\": \"Google\" #setting #step3.config autoformat when save the file #required: To automatically format a file on save, add the following to your vscode settings.json file \"editor.formatOnSave\": true #optional: \"clang-format.executable\": \"/absolute/path/to/clang-format\" \u6dfb\u52a0\u5934\u6587\u4ef6\u8def\u5f84 \u6309F1\u6216 Ctrl+Shift+p \u5728\u5f39\u51fa\u7684\u5907\u9009\u9009\u9879\u4e2d\u9009\u62e9 C/C++:Edit Configuration(JSON)\uff0c\u81ea\u52a8\u6253\u5f00c_cpp_properties.json FAQ [ \u4ee3\u7801\u81ea\u52a8\u8df3\u8f6c\u5931\u8d25 ]\"Visual Studio Code is unable to watch for file changes in this large workspace\" solution /etc/sysctl.conf \u6587\u4ef6\u7684\u6700\u540e\u4e00\u884c\u52a0\u5165 fs.inotify.max_user_watches=524288 vscode\u7684\u6587\u4ef6\u76d1\u542c\u6570\u76ee,\u7136\u540e sudo sysctl -p \u91cd\u542f\u5373\u53ef \u81ea\u52a8\u8df3\u8f6c\u65e0\u6548 C/C++\u63d2\u4ef6\u8bbe\u7f6e \"C_Cpp.intelliSenseEngine\": \"Default\" , \u4e4b\u524d setting.json \u8bef\u64cd\u4f5c\u4e3aDisabled, fuck!!!","title":"vscode"},{"location":"Tools/workspace_setup_ubuntu/#git","text":"sudo apt install git # config git config --global user.name \"YongcongWang\" git config --global user.email \"yongcong.wang@outlook.com\" git config --global core.editor vim # generate key ssh-keygen -t rsa -C \"yongcong.wang@outlook.com\"","title":"git"},{"location":"Tools/workspace_setup_ubuntu/#config","text":"Open github and sign in; In Settings/SSH and GPG keys click New SSH Key ; Paste id_rsa.PUB (in /home/.ssh/id_rsa.pub ); Test: ssh -T git@github.com .","title":"Config"}]}