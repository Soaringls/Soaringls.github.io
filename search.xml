<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Bjarne Strooustrup:The Essence of C++</title>
    <url>/2020/10/25/coding-the-essence-of-c/</url>
    <content><![CDATA[<p>This page is the note of Bjarne’s speech at Edinburgh from youtobe.</p>
<a id="more"></a>
<h2 id="What-did-do-I-want"><a href="#What-did-do-I-want" class="headerlink" title="What did/do I want?"></a>What did/do I want?</h2><p>Type safety</p>
<ul>
<li>Encapsulate necessary unsafe operations</li>
</ul>
<p>Resource safety</p>
<ul>
<li>it’s not all memory</li>
</ul>
<p>Performance</p>
<ul>
<li>For some parts of almost all systems,it’s important</li>
</ul>
<p>Predictability</p>
<ul>
<li>For hard and soft real time</li>
</ul>
<p>Teachability</p>
<ul>
<li>Complexity of code should be proportional to the complexity of the task</li>
</ul>
<p>Readability</p>
<ul>
<li>People and machines(“analyzability”)<h2 id="Who-did-do-I-want-it-for"><a href="#Who-did-do-I-want-it-for" class="headerlink" title="Who did/do I want it for?"></a>Who did/do I want it for?</h2>Primary concerns</li>
<li>Systems propramming</li>
<li>Embedded systems</li>
<li>Resource constrained systems</li>
<li>Large systems</li>
</ul>
<p>Experts</p>
<ul>
<li>“c++ is expert friendly”</li>
</ul>
<p>Novices</p>
<ul>
<li>“c++ is not just expert friendly”</li>
</ul>
<h2 id="C-in-two-lines"><a href="#C-in-two-lines" class="headerlink" title="C++ in two lines"></a>C++ in two lines</h2><h3 id="What-is-C"><a href="#What-is-C" class="headerlink" title="What is C++?"></a>What is C++?</h3><p>Direct map to hardware</p>
<ul>
<li>of instructions and dundamental data types</li>
<li>Initially from C</li>
</ul>
<p>Zero-Overhead abstraction</p>
<ul>
<li>Classes with constructors and destructors,inheritance,generic programming,functional programming techniques</li>
<li>Initially from Simula</li>
</ul>
<p>Much of the inspiration came from operating systems<br>What does C++ wants to be when it grows up?</p>
<ul>
<li>See above</li>
<li>And better at it for more modern hardware and techniques</li>
<li>Compatibility/stability is a feature</li>
</ul>
<h2 id="Cpp-is-a-light-weight-abstraction-programming-language"><a href="#Cpp-is-a-light-weight-abstraction-programming-language" class="headerlink" title="Cpp is a light-weight abstraction programming language"></a>Cpp is a light-weight abstraction programming language</h2><p>building and using efficient and elegant abstractions</p>
<h2 id="Key-strengths"><a href="#Key-strengths" class="headerlink" title="Key strengths:"></a>Key strengths:</h2><ul>
<li>software infrastructure</li>
<li>resource-constrained applications<h3 id="Resource-Management"><a href="#Resource-Management" class="headerlink" title="Resource Management"></a>Resource Management</h3><h4 id="A-resource-is-something-that-must-be-acquired-and-latter-released"><a href="#A-resource-is-something-that-must-be-acquired-and-latter-released" class="headerlink" title="A resource is something that must be acquired and latter released"></a>A resource is something that must be acquired and latter released</h4></li>
<li>Explicitly or implicitly</li>
<li>Resource management should not be manual<ul>
<li>we don’t want leaks(泄露)</li>
</ul>
</li>
</ul>
<h4 id="A-resource-should-have-an-owner"><a href="#A-resource-should-have-an-owner" class="headerlink" title="A resource should have an owner"></a>A resource should have an owner</h4><ul>
<li>Usually a “handle”</li>
<li>A “handle” should present a well-defined and useful abstraction</li>
</ul>
<h4 id="All-the-standard-library-containers-manage-their-elements"><a href="#All-the-standard-library-containers-manage-their-elements" class="headerlink" title="All the standard-library containers manage their elements"></a>All the standard-library containers manage their elements</h4><ul>
<li>vector</li>
<li>list,forward_list(singly-linked list),…</li>
<li>map,unordered_map(hash table),…</li>
<li>set,multi_set,…</li>
<li>string</li>
</ul>
<h4 id="Other-standard-library-classes-manage-other-resoures"><a href="#Other-standard-library-classes-manage-other-resoures" class="headerlink" title="Other standard-library classes manage other resoures"></a>Other standard-library classes manage other resoures</h4><ul>
<li>Not just memory(Garbage collection is not sufficient)</li>
<li>thread,lock_guard,…</li>
<li>istream,fstream,…</li>
<li>unique_ptr,shared_ptr,…</li>
</ul>
<h4 id="Use-constructors-and-destructor"><a href="#Use-constructors-and-destructor" class="headerlink" title="Use constructors and destructor"></a>Use constructors and destructor</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vector</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Vector(<span class="built_in">initializer_list</span>&lt;T&gt;);<span class="comment">//vector of elements of type T</span></span><br><span class="line">  ~Vector();</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  T* elem; <span class="comment">//pointer to elements</span></span><br><span class="line">  <span class="keyword">int</span> sz;  <span class="comment">//number of  elements</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fct</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Vector&lt;<span class="keyword">double</span>&gt; vd&#123;<span class="number">1</span>, <span class="number">1.625</span>, <span class="number">3.14</span>, <span class="number">2.998e8</span>&#125;;</span><br><span class="line">    Vector&lt;<span class="built_in">string</span>&gt; vs&#123;<span class="string">"Strachey"</span>, <span class="string">"Richards"</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Pointer-Misuse"><a href="#Pointer-Misuse" class="headerlink" title="Pointer Misuse"></a>Pointer Misuse</h4><blockquote>
<p>Many(most) uses of pointers in local scope are not exception safe</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Gadget* p = <span class="keyword">new</span> Gadget(n);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">100</span>) <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Weird!"</span>);<span class="comment">//leak</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">200</span>) <span class="keyword">return</span>;                            <span class="comment">//leak</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">delete</span> p; <span class="comment">//I want my garbage collector!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">But garbage collection would not release non-memory resources</span><br><span class="line">Why use a &quot;naked&quot; pointer?</span><br></pre></td></tr></table></figure>
<h4 id="Resource-Handles-and-Pointers"><a href="#Resource-Handles-and-Pointers" class="headerlink" title="Resource Handles and Pointers"></a>Resource Handles and Pointers</h4><blockquote>
<p>A std::shared_ptr releases its object at when the last shared_ptr to it is destroyed</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = make_shared&lt;Gadget&gt;(n); <span class="comment">//manage that pointer!</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">100</span>) <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Weird!"</span>);<span class="comment">//no leak</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">200</span>) <span class="keyword">return</span>;                            <span class="comment">//no leak</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>shared_ptr</strong> provides a form of garbage collection(But I’m not sharing anything!)</p>
<blockquote>
<p>A <strong>std::unique_ptr</strong> releases its object at when it goes out of scope</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> p = make_unique&lt;Gadget&gt;(n); <span class="comment">//manage that pointer!</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">100</span>) <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"Weird!"</span>);<span class="comment">//no leak</span></span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">200</span>) <span class="keyword">return</span>;                            <span class="comment">//no leak</span></span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is simple and cheap<br>No more expensive than a “plain old pointer”</p>
<h4 id="Error-Handling-and-Resources"><a href="#Error-Handling-and-Resources" class="headerlink" title="Error Handling and Resources"></a>Error Handling and Resources</h4><p>“Resource Acquistion Is Intialization”(RAII)</p>
<ol>
<li>Acquire during construction</li>
<li>Release in destructor</li>
</ol>
<p>Throw exception in case of failure</p>
<blockquote>
<p>In particular, throw is a constructor cannot construct and object</p>
</blockquote>
<p>Never throw while holding a resource <strong>not</strong> owned by a handle</p>
<blockquote>
<p>Never leak</p>
</blockquote>
<p>In general</p>
<blockquote>
<p>Leave established invariants intact when leaving a scope</p>
</blockquote>
<h2 id="Why-do-we-use-pointers"><a href="#Why-do-we-use-pointers" class="headerlink" title="Why do we use pointers?"></a>Why do we use pointers?</h2><p>And references,iterators,etc.<br>To represent ownership</p>
<ul>
<li><strong>Don’t Stop!</strong> Instead, use handles</li>
</ul>
<p>To reference resources</p>
<ul>
<li>from within a handle</li>
</ul>
<p>To represent positions</p>
<ul>
<li>Be careful</li>
</ul>
<p>To pass large amounts of data(into a function)</p>
<ul>
<li>E.g. pass by <strong>const</strong> reference</li>
</ul>
<p>To return large amount of data(out of a function)</p>
<ul>
<li><p>Don’t! Instead use move operations</p>
<h2 id="How-to-get-a-lot-of-data-cheaply-out-of-a-function"><a href="#How-to-get-a-lot-of-data-cheaply-out-of-a-function" class="headerlink" title="How to get a lot of data cheaply out of a function?"></a>How to get a lot of data cheaply out of a function?</h2><p>Consider</p>
</li>
<li><p>factory functions</p>
</li>
<li><p>functions returning lots of objects</p>
</li>
</ul>
<p>Return a pointer to a <strong>new</strong>‘d object?</p>
<ul>
<li>M* operator+(const M&amp;, const M&amp;);</li>
<li>M* pm = m1 + m2;  //ugly: and who does the delete?</li>
<li>M* q = *pm + m3;  //ugly: and who does the delete?</li>
</ul>
<p>Return a reference to a <strong>new</strong>‘d object?</p>
<ul>
<li>M&amp; operator+(const M&amp;, const M&amp;);</li>
<li>M m = m1 + m2; //looks OK; but who does the delete? delete what?</li>
</ul>
<p>Pass a target object?</p>
<ul>
<li>void operator+(const M&amp;, const M&amp;, M&amp; result);</li>
<li>M m;</li>
<li>operator+(m1, m2, m); //ugly: We are regressing(退化,回归) towards assembly code(汇编代码)</li>
</ul>
<p><strong>conslusion</strong></p>
<ul>
<li><strong>Consider</strong><br>factory functions<br>functions returning lots of objects(in containers)</li>
<li><strong>Return an object!</strong><br><code>M operator+(const M&amp;, const M&amp;);</code><br>How? Becase copies are expensive<br>Tricks to avoid copying are brittle<br>Tricks to avoid copying are not general</li>
<li><strong>Return a handle</strong><br>sample and cheap<h3 id="Move-semantics"><a href="#Move-semantics" class="headerlink" title="Move semantics"></a>Move semantics</h3></li>
<li>Direct support in C++11:Move constructor<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Matrix</span>&#123;</span></span><br><span class="line">  Representation rep;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  Matrix(Matrix&amp;&amp; a) <span class="comment">//move constructor</span></span><br><span class="line">  &#123;</span><br><span class="line">    rep = a.rep; <span class="comment">//*this gets a's elements</span></span><br><span class="line">    a.rep = &#123;&#125;;  <span class="comment">//a becomes the empty Matrix</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Matrix res = a + b;</span><br></pre></td></tr></table></figure></li>
<li>Often, you can avoid writing copy and move operations<br>Easily avoid<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Matrix</span>&#123;</span></span><br><span class="line">  <span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; elem; <span class="comment">//elements here</span></span><br><span class="line">  <span class="comment">//...matrix access...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>Matrix just “inherit” resource management from vector</li>
<li>Copy and a move operations can often be implicitly generated from members<br>Good copy and move operations, e.g from the standard library</li>
</ul>
]]></content>
      <categories>
        <category>coding</category>
      </categories>
  </entry>
  <entry>
    <title>Several Design Patterns By C++</title>
    <url>/2021/01/08/coding-several-design-patterns-by-cpp/</url>
    <content><![CDATA[<p>Introduce some normal design patterns,codes by cpp.</p>
<a id="more"></a>
<h1 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h1><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><ul>
<li>Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from the clients that use it.</li>
<li>Capture the abstraction in an interface, bury implementation details in derived classes.</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By dexter @ 11/10/2020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Strategy</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Strategy</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Strategy()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Strategy(<span class="keyword">const</span> Strategy&amp; rhs);</span><br><span class="line">  Strategy&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Strategy&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> :</span> <span class="keyword">public</span> Strategy &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteStrategyA</span><span class="params">()</span> : <span class="title">Strategy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteStrategyA() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteStrategyA::exec()"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  ConcreteStrategyA(<span class="keyword">const</span> ConcreteStrategyA&amp; rhs);</span><br><span class="line">  ConcreteStrategyA&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteStrategyA&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> :</span> <span class="keyword">public</span> Strategy &#123;</span><br><span class="line"> <span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteStrategyB</span><span class="params">()</span> : <span class="title">Strategy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteStrategyB()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"ConcreteStrategyB::exec()"</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line">  ConcreteStrategyB(<span class="keyword">const</span> ConcreteStrategyB&amp; rhs);</span><br><span class="line">  ConcreteStrategyB&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteStrategyB&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Context</span><span class="params">(Strategy* strategy)</span> : <span class="title">strategy_</span><span class="params">(strategy)</span></span>&#123;&#125;</span><br><span class="line">  ~Context()&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setSetrategy</span><span class="params">(Strategy* strategy)</span> </span>&#123;</span><br><span class="line">    strategy_ = strategy;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">exec</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    strategy_-&gt;exec();</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Context(<span class="keyword">const</span> Context&amp; rhs);</span><br><span class="line">  Context&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Context&amp; rhs);</span><br><span class="line"></span><br><span class="line">  Strategy* strategy_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  ConcreteStrategyA stra_a;</span><br><span class="line">  ConcreteStrategyB stra_b;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"set a strategy:\n"</span>;</span><br><span class="line">  <span class="function">Context <span class="title">cont</span><span class="params">(&amp;stra_a)</span></span>;</span><br><span class="line">  cont.exec();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"set a strategy:\n"</span>;</span><br><span class="line">  cont.setSetrategy(&amp;stra_b);</span><br><span class="line">  cont.exec();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> a strategy:</span><br><span class="line">ConcreteStrategyA::<span class="built_in">exec</span>()</span><br><span class="line"><span class="built_in">set</span> a strategy:</span><br><span class="line">ConcreteStrategyB::<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure>

<h1 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h1><p>Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified, its dependent objects are to be notified automatically.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By dexter @ 12/10/2020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>: </span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Observer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Observer() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Observer(<span class="keyword">const</span> Observer&amp; rhs);</span><br><span class="line">  Observer&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Observer&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserveA</span> :</span> <span class="keyword">public</span> Observer &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteObserveA</span><span class="params">()</span> : <span class="title">Observer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteObserveA() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"ConcreteObserveA::update\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line">  ConcreteObserveA(<span class="keyword">const</span> ConcreteObserveA&amp; rhs);</span><br><span class="line">  ConcreteObserveA&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteObserveA&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserveB</span> :</span> <span class="keyword">public</span> Observer &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteObserveB</span><span class="params">()</span> : <span class="title">Observer</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteObserveB() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"ConcreteObserveB::update\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>: </span><br><span class="line">  ConcreteObserveB(<span class="keyword">const</span> ConcreteObserveB&amp; rhs);</span><br><span class="line">  ConcreteObserveB&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteObserveB&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Subject</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Subject() &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer* observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer* observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  Subject(<span class="keyword">const</span> Subject&amp; rhs);</span><br><span class="line">  Subject&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Subject&amp; rhs);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubjectA</span> :</span> <span class="keyword">public</span> Subject &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteSubjectA</span><span class="params">()</span> : <span class="title">Subject</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteSubjectA() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">registerObserver</span><span class="params">(Observer* observer)</span> </span>&#123;</span><br><span class="line">      observer_list_.push_back(observer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer* observer)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> it = observer_list_.begin(); it != observer_list_.end(); it++)&#123;</span><br><span class="line">          <span class="keyword">if</span>(*it == observer)&#123;</span><br><span class="line">              observer_list_.erase(it);</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">notifyObserver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> it = observer_list_.begin(); it != observer_list_.end(); it++)&#123;</span><br><span class="line">          (*it)-&gt;update();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  ConcreteSubjectA(<span class="keyword">const</span> ConcreteSubjectA&amp; rhs);</span><br><span class="line">  ConcreteSubjectA&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteSubjectA&amp; rhs);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Observer*&gt; observer_list_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ConcreteObserveA obser_a;</span><br><span class="line">    ConcreteObserveB obser_b;</span><br><span class="line">    ConcreteSubjectA suba;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"add  two observer and update:\n"</span>;</span><br><span class="line">    suba.registerObserver(&amp;obser_a);</span><br><span class="line">    suba.registerObserver(&amp;obser_b);</span><br><span class="line">    suba.notifyObserver();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"remove obser_a and update:\n"</span>;</span><br><span class="line"></span><br><span class="line">    suba.removeObserver(&amp;obser_a);</span><br><span class="line">    suba.notifyObserver();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">add  two observer and update:</span><br><span class="line">ConcreteObserveA::update</span><br><span class="line">ConcreteObserveB::update</span><br><span class="line">remove obser_a and update:</span><br><span class="line">ConcreteObserveB::update</span><br></pre></td></tr></table></figure>

<h1 id="Decorator-Pattern"><a href="#Decorator-Pattern" class="headerlink" title="Decorator Pattern"></a>Decorator Pattern</h1><p>Decorator pattern allows a user to add new functionality to an existing object without altering its structure. This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.<br>This pattern creates a decorator class which wraps the original class and privides additional functionality keeping class methods signature inact;</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By dexter @ 12/10/2020</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Component</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  Component(<span class="keyword">const</span> Component&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  Component&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Component&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">virtual</span> ~Component() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodA</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodB</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteComponentA</span> :</span> <span class="keyword">public</span> Component &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ConcreteComponentA() : Component() &#123;&#125;</span><br><span class="line">  ~ConcreteComponentA() &#123;&#125;</span><br><span class="line">  ConcreteComponentA(<span class="keyword">const</span> ConcreteComponentA&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteComponentA&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteComponentA&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"ConcreteComponentA methodA"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"ConcreteComponentA methodB"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> :</span> <span class="keyword">public</span> Component &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Decorator(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Component&gt; component) : component_(component) &#123;&#125;</span><br><span class="line">  ~Decorator() &#123;&#125;</span><br><span class="line">  Decorator(<span class="keyword">const</span> Decorator&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  Decorator&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Decorator&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> component_-&gt;methodA();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> component_-&gt;methodB();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"> <span class="keyword">protected</span>:</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Component&gt; component_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorA</span> :</span> <span class="keyword">public</span> Decorator &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ConcreteDecoratorA(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Component&gt; component) : Decorator(component) &#123;&#125;</span><br><span class="line">  ~ConcreteDecoratorA() &#123;&#125;</span><br><span class="line">  ConcreteDecoratorA(<span class="keyword">const</span> ConcreteDecoratorA&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteDecoratorA&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteDecoratorA&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> component_-&gt;methodA() + <span class="string">"  ConcreteDecoratorA methodA"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> component_-&gt;methodB() + <span class="string">"  ConcreteDecoratorA methodB"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteDecoratorB</span> :</span> <span class="keyword">public</span> Decorator &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  ConcreteDecoratorB(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Component&gt; component) : Decorator(component) &#123;&#125;</span><br><span class="line">  ~ConcreteDecoratorB() &#123;&#125;</span><br><span class="line">  ConcreteDecoratorB(<span class="keyword">const</span> ConcreteDecoratorB&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteDecoratorB&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteDecoratorB&amp; rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> component_-&gt;methodA() + <span class="string">"  ConcreteDecoratorB methodA"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">methodB</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> component_-&gt;methodB() + <span class="string">"  ConcreteDecoratorB methodB"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ConcreteComponentA&gt; ptr_component_a = <span class="built_in">std</span>::make_shared&lt;ConcreteComponentA&gt;();</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptr_component_a-&gt;methodA() &lt;&lt; <span class="string">", "</span> &lt;&lt; ptr_component_a-&gt;methodB() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ConcreteDecoratorA&gt; ptr_decorator_a = <span class="built_in">std</span>::make_shared&lt;ConcreteDecoratorA&gt;(</span><br><span class="line">      ptr_component_a);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptr_decorator_a-&gt;methodA() &lt;&lt; <span class="string">", "</span> &lt;&lt; ptr_decorator_a-&gt;methodB() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ConcreteDecoratorB&gt; ptr_decorator_b = <span class="built_in">std</span>::make_shared&lt;ConcreteDecoratorB&gt;(</span><br><span class="line">      ptr_component_a);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptr_decorator_b-&gt;methodA() &lt;&lt; <span class="string">", "</span> &lt;&lt; ptr_decorator_b-&gt;methodB() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;ConcreteDecoratorB&gt; ptr_decorator_a_b = <span class="built_in">std</span>::make_shared&lt;ConcreteDecoratorB&gt;(</span><br><span class="line">      ptr_decorator_a);</span><br><span class="line">  <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; ptr_decorator_a_b-&gt;methodA() &lt;&lt; <span class="string">", "</span> &lt;&lt; ptr_decorator_a_b-&gt;methodB() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConcreteComponentA methodA, ConcreteComponentA methodB</span><br><span class="line">ConcreteComponentA methodA  ConcreteDecoratorA methodA, ConcreteComponentA methodB  ConcreteDecoratorA methodB</span><br><span class="line">ConcreteComponentA methodA  ConcreteDecoratorB methodA, ConcreteComponentA methodB  ConcreteDecoratorB methodB</span><br><span class="line">ConcreteComponentA methodA  ConcreteDecoratorA methodA  ConcreteDecoratorB methodA, ConcreteComponentA methodB  ConcreteDecoratorA methodB  ConcreteDecoratorB methodB</span><br></pre></td></tr></table></figure>
<h1 id="Factory-Pattern"><a href="#Factory-Pattern" class="headerlink" title="Factory Pattern"></a>Factory Pattern</h1><p>The factory pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact calss of the object that will be created. This is done by creating objects by calling a factory method, either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes rather than by calling a constructor.<br>According to the type of problems, there are three kinds of <code>Factory Pattern</code>:</p>
<ul>
<li>Simple Factory</li>
<li>Normal Factory</li>
<li>Abstract Factory</li>
</ul>
<h2 id="Simple-Factory"><a href="#Simple-Factory" class="headerlink" title="Simple Factory"></a>Simple Factory</h2><p>Simple Factory defines a method to create an object. It voilates the <code>Open/close Principle(OCP)</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By dexter @ 13/10/2020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Product</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Product() &#123;&#125;</span><br><span class="line">  Product(<span class="keyword">const</span> Product &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  Product &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Product &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> :</span> <span class="keyword">public</span> Product &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteProductA</span><span class="params">()</span>  : <span class="title">Product</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteProductA() &#123;&#125;</span><br><span class="line">  ConcreteProductA(<span class="keyword">const</span> ConcreteProductA &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteProductA &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteProductA &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"ConcreteProductA is called..."</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> :</span> <span class="keyword">public</span> Product &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteProductB</span><span class="params">()</span>  : <span class="title">Product</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteProductB() &#123;&#125;</span><br><span class="line">  ConcreteProductB(<span class="keyword">const</span> ConcreteProductB &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteProductB &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteProductB &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"ConcreteProductB is called..."</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  Factory() &#123;&#125;</span><br><span class="line">  ~Factory() &#123;&#125;</span><br><span class="line">  Factory(<span class="keyword">const</span> Factory &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  Factory &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Factory &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Product&gt; <span class="title">createProduct</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span> &amp;product)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(product == <span class="string">"A"</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;ConcreteProductA&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(product == <span class="string">"B"</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;ConcreteProductB&gt;();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Factory factory;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Product&gt; product_a = factory.createProduct(<span class="string">"A"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Product&gt; product_b = factory.createProduct(<span class="string">"B"</span>);</span><br><span class="line"></span><br><span class="line">    product_a-&gt;operation();</span><br><span class="line">    product_b-&gt;operation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConcreteProductA is called...</span><br><span class="line">ConcreteProductB is called...</span><br></pre></td></tr></table></figure>

<h2 id="Normal-Factory"><a href="#Normal-Factory" class="headerlink" title="Normal Factory"></a>Normal Factory</h2><p>Normal Factory not only encapsulates the creation of object but also put the creation of object into derived class. It only provides the method of creating objects, and the realization is in <code>ConcreteFactory</code>.<br>Disadvantage: the addition of factory object will cause the increasing of classes.</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//By dexter @ 13/10/2020</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span>&#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Product</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Product() &#123;&#125;</span><br><span class="line">  Product(<span class="keyword">const</span> Product &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  Product &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Product &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductA</span> :</span> <span class="keyword">public</span> Product &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteProductA</span><span class="params">()</span> : <span class="title">Product</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteProductA() &#123;&#125;</span><br><span class="line">  ConcreteProductA(<span class="keyword">const</span> ConcreteProductA &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteProductA &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteProductA &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"ConcreteProductA is called..."</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteProductB</span> :</span> <span class="keyword">public</span> Product &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteProductB</span><span class="params">()</span> : <span class="title">Product</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">  ~ConcreteProductB() &#123;&#125;</span><br><span class="line">  ConcreteProductB(<span class="keyword">const</span> ConcreteProductB &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteProductB &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteProductB &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="built_in">std</span>::<span class="built_in">cerr</span>&lt;&lt;<span class="string">"ConcreteProductB is called..."</span>&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> &#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">Factory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">virtual</span> ~Factory() &#123;&#125;</span><br><span class="line">  Factory(<span class="keyword">const</span> Factory &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  Factory &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> Factory &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Product&gt; <span class="title">createProduct</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactoryA</span> :</span> <span class="keyword">public</span> Factory &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteFactoryA</span><span class="params">()</span> : <span class="title">Factory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteFactoryA() &#123;&#125;</span><br><span class="line">  ConcreteFactoryA(<span class="keyword">const</span> ConcreteFactoryA &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteFactoryA &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteFactoryA &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Product&gt; <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;ConcreteProductA&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ConcreteFactoryB</span> :</span> <span class="keyword">public</span> Factory &#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">  <span class="function"><span class="keyword">explicit</span> <span class="title">ConcreteFactoryB</span><span class="params">()</span> : <span class="title">Factory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">  ~ConcreteFactoryB() &#123;&#125;</span><br><span class="line">  ConcreteFactoryB(<span class="keyword">const</span> ConcreteFactoryB &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line">  ConcreteFactoryB &amp;<span class="keyword">operator</span>=(<span class="keyword">const</span> ConcreteFactoryB &amp;rhs) = <span class="keyword">delete</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Product&gt; <span class="title">createProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">std</span>::make_shared&lt;ConcreteProductB&gt;();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> factor_a = <span class="built_in">std</span>::make_shared&lt;ConcreteFactoryA&gt;();</span><br><span class="line">    <span class="keyword">auto</span> product_a = factor_a-&gt;createProduct();</span><br><span class="line">    product_a-&gt;operation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> factor_b = <span class="built_in">std</span>::make_shared&lt;ConcreteFactoryB&gt;();</span><br><span class="line">    <span class="keyword">auto</span> product_b = factor_b-&gt;createProduct();</span><br><span class="line">    product_b-&gt;operation();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>output:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">ConcreteProductA is called...</span><br><span class="line">ConcreteProductB is called...</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>coding</category>
        <category>pattern</category>
      </categories>
  </entry>
  <entry>
    <title>Terminator Shortcuts Usage</title>
    <url>/2020/10/30/tools-usage-ros/</url>
    <content><![CDATA[<ul>
<li><p><strong>compile command</strong><br>compile all modules<br><code>colcon build --cmake-args -DCMAKE_BUILD_TYPE=Debug Release</code><br>compile special module<br><code>colcon build --packages-select ekf_localizer</code></p>
</li>
<li><p><strong>open rviz using special rviz config</strong><br><code>rviz -d ./data/ces_mapping.rviz</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>Note after reading paper of loam</title>
    <url>/2020/10/09/paper-slam-loam/</url>
    <content><![CDATA[<p>this blog conclud from <strong>loam(Ji Zhang),LeGO-LOAM&amp;LIO-SAM(Tixiao Shan)</strong><br>State estimation, localization and mapping are fundamental prerequisites for a successful intelligent mobile robot,required for feedback control, obstacle avoidance, and planning, among many other capabilities.Using <strong>vision-based</strong> and <strong>lidar-based</strong> sensing,great efforts have been devoted to achiving high-performance real-time simultaneous localization and mapping(SLAM) that can support a mobile robot’s six degree-of-freedom state estimation.</p>
<a id="more"></a>
<p>Vision-based methods typically use a monocular or stereo camera and triangulate features across successive images to determine the camera motion.Although vision-based methods are especially suitable for palce recognition,their sensitivity to initialization,illumination and range make them unreliable when they alone are used to supportan autonomous navigation system.<br>On the other hand, lidar-based methods are largely invariant to illumination change,Especially with the availability of long-range,high-resolution 3D liar,becomes more suitable to directly capture the fine details of an environment in 3D space.Therefor there was researchs among loam,lego-loam and lio-sam, those paper focuses on lidar-based state estimation and mappnig methods.</p>
<table>
<thead>
<tr>
<th>method</th>
<th>strenght</th>
<th>weakness</th>
</tr>
</thead>
<tbody><tr>
<td>vision-based</td>
<td>–more suitable for place recognition<br>–better in loop-closure detection</td>
<td>–sensitive to illumination<br>–view point change may make it unreliable</td>
</tr>
<tr>
<td>lidar-based</td>
<td>–work normally at night<br>–captrure more details about environment at long ranges<br>–bigger angle-view</td>
<td>a</td>
</tr>
</tbody></table>
<h1 id="Desc-about-loam-lego-loam-lio-sam"><a href="#Desc-about-loam-lego-loam-lio-sam" class="headerlink" title="Desc about loam lego-loam lio-sam"></a>Desc about loam lego-loam lio-sam</h1><table>
<thead>
<tr>
<th>method</th>
<th>strength</th>
<th>weakness</th>
<th>IMU</th>
</tr>
</thead>
<tbody><tr>
<td>loam</td>
<td>–low-drift and real-time<br>–correct the motion distortion of pointcloud<br>–feature-based scan matching: edge with edge and planar with planar to ensure fats computation becase of its less computational resources requirement<br>–good strategy: coarse processing  at high frequency to estimate veocity, fine processing at low frequency to create map</td>
<td>–saving data in a global voxel map,online optimization process will less efficient when the global voxel map becomes dense in a feature-rich areas<br>–difficult to perform loop closure detection and incorporate other absolute measurements,e.g GPS for pose correction<br>–loam suffers from drift in large-scale test, as it is a scan-matching based method at its core<br>–not very universal to different lidars:the method of extracting features are integrated with the rotating lidar tightly</td>
<td>–de-skew the lidar scan,that is motion compensator<br>–provide a motion prior for scan-matching<br>–<strong>loosely-coupled</strong>:IMU is not involved in the optimization process of the algorithm</td>
</tr>
<tr>
<td>lego-loam</td>
<td>–lightweight and ground-optimized lidar odom<br>–two step L-M optimization computes pose transformation separately<br>–add loop closure</td>
<td></td>
<td>same as loam</td>
</tr>
<tr>
<td>lio-sam</td>
<td>–a tightly-coupled lidar inertial odometry framework built atop a factor graph,which is suitable for multi-sensor fusion and global optimization<br>–an efficient,local sliding window-based scan-matching approach that enables real-time performance by registering selectively chosen new keyframes to a fixed-size set of prior sub-keyframes</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="lidar-motion-compensator"><a href="#lidar-motion-compensator" class="headerlink" title="lidar motion compensator"></a>lidar motion compensator</h2><p>A scan’s point cloud is often skewed because of the rotation mechanism of modern 3D lidar and sensor motion.Solely using lidar for pose estimation is not ideal since registration using skewed pointclouds or features will eventually cause large drift.<br>Therefore, lidar is typically  used in conjunction with other sensors, such as GPS and IMU, for state estimation and ampping.</p>
<h1 id="LOAM"><a href="#LOAM" class="headerlink" title="LOAM"></a>LOAM</h1><h2 id="Assume"><a href="#Assume" class="headerlink" title="Assume"></a>Assume</h2><ul>
<li>lidar is pre-calibrated</li>
<li>angular and linear velocities of the lidar are smooth and continuous over time without abrupt changes</li>
</ul>
<h2 id="Feature-Point-Extraction"><a href="#Feature-Point-Extraction" class="headerlink" title="Feature Point Extraction"></a>Feature Point Extraction</h2><p>we select feature point that are on sharp edges and planar surface patches, Let $i$ be a point in $P_k$, and let $S$ be the set of consecutive points of $i$ returned by the laser scanner in the same scan.</p>
<ol>
<li><p>Calculate the smoothness <strong>$c$</strong> of the local surface at point i, where $i \in P_k$<br>$$<br>c = \frac{1}{|S|\cdot|X^L_{(k,i)}|}\cdot|\sum_{j\in S,j\neq i}(X^L_{(k,i)} - X^L_{(k,j)})|\tag{1}<br>$$</p>
</li>
<li><p>The points in a scan are sorted based on the $c$ values.<br>To evenly distribute the feature points within the environment,we separate a scan to four identical subregions.Each subregion can provide maximally 2 edge points and 4 planar points<br>$$<br>bool(c)=<br>\begin{cases}<br>c &gt; threshold, &amp;  \text{dege points} \\<br>c &lt; threshold, &amp;  \text{planar points}<br>\end{cases}<br>$$</p>
<ul>
<li>we try to avoid points whose surrounded points are selected,or points on local planar surfaces that are roughly parallel to the laser beams are usually considered as unreliable.</li>
<li>we also try to avoid points that are on boundary of occluded regions</li>
</ul>
</li>
</ol>
<p><strong>Conclusion</strong><br>feature points are selected as edge points starting from the maximum $c$ value, and planarpoints starting from the minimum $c$ value, and if a point is selected,</p>
<ul>
<li>The number of selected edge points or planar points cannot exceed the maximum of thesubregion</li>
<li>None of its surrounding point is already selected</li>
<li>It cannot be on a surface patch that is roughly parallel to the laser beam, or on boundaryof an occluded region.</li>
</ul>
<h2 id="Find-Feature-Point-Correspondence"><a href="#Find-Feature-Point-Correspondence" class="headerlink" title="Find Feature Point Correspondence"></a>Find Feature Point Correspondence</h2><p>The odometry algorithm estimates motion of the lidar within a sweep(frame),Let $t_k$be  the starting  time of a sweep $k$. At the end of each sweep, the point cloud perceived during the sweep,$P_k$, is reprojected to time stamp $t_{k+1}$.we denote the reprojected sweep(frame) as $\bar{P_{k}}$.During the next sweep $k+1$, $\bar{P_{k}}$ is used together with the newly received point cloud $P_{k+1}$, to estimate the motion of the lidar.</p>
<table>
<thead>
<tr>
<th align="left">raw frame</th>
<th align="left">corrected frame</th>
<th align="left">edge pts</th>
<th align="left">planar pts</th>
</tr>
</thead>
<tbody><tr>
<td align="left">$P_k$<br>during [$t_k,t_{k+1}$]</td>
<td align="left">$\bar{P}_k$<br>by reprojected $P_k$to timesatmp $t_{k+1}$</td>
<td align="left">$\mathcal{E}_k$<br>edge pts from$\bar{P}_k$</td>
<td align="left">$\mathcal{H}_k$<br>planar pts from$\bar{P}_k$</td>
</tr>
<tr>
<td align="left">$P_{k+1}$<br>during [$t_{k+1},t_{k+2}$]</td>
<td align="left">$\bar{P}_{k+1}$<br>by reprojected $P_{k+1}$to timesatmp $t_{k+1}$</td>
<td align="left">$\mathcal{E}_{k+1}$<br>edge pts from$\bar{P}_{k+1}$</td>
<td align="left">$\mathcal{H}_{k+1}$<br>planar pts from$\bar{P}_{k+1}$</td>
</tr>
</tbody></table>
<ul>
<li><p>Source of Feature Points</p>
<ul>
<li>At each iteration,$\mathcal{E}_{k+1}$ and $\mathcal{H}_{k+1}$ are reprojected point sets at the beginning of the sweep $\bar{P}_{k+1}$by using currently estimated transform.</li>
<li>For each point in $\mathcal{E}_{k+1}$ and $\mathcal{H}_{k+1}$,we are going to find the closest neighbor point in $\bar{P}_k$,which is stored in a 3D KD-tree for fast index.</li>
</ul>
</li>
<li><p>Find the closest points in $\mathcal{E}_{k}$ and $\mathcal{H}_{k}$ for each point of $\mathcal{E}_{k+1}$ and $\mathcal{H}_{k+1}$</p>
<ul>
<li><p>find closest edge points in $\mathcal{E}_{k}$ for each point of $\mathcal{E}_{k+1}$<br>let $X^L_{(k+1,i)}$denote the point $\mathcal{i} \in \mathcal{E}_{k+1}$,which is in LidarCoordinateSystem{$L$}<br>the edge line is represented by two points,points $j \in \mathcal{E}_k$ and $l \in \mathcal{E}_k$ are closest neighbor of $i$ in consecutive scans.<br><br><strong>Notice</strong> we particularly require that $j$ and $l$ are from different scans considering that a single scan cannot contain more than one points from the same dege line</p>
</li>
<li><p>find closest planar points in $\mathcal{H}_{k}$ for each point of $\mathcal{H}_{k+1}$<br>the planar patch is represented by three points,similar to last,we find the closest neighbor of $i$ in $\bar{P}_k$,denote as $j$,$l$,$m$<br><br><strong>Notice</strong> about $j$,$l$,$m$,two of them are on the same scan, another is in consecutive scans,This guarantees that the three points are <strong>non-collinear</strong></p>
</li>
<li><p>compute the distance between every feature point of $\bar{P}_{k+1}$ to the closest neighbor points of $\bar{P}_{k}$<br><br><strong>Notice</strong> all points in the formula ($\mathcal{2}$) and ($\mathcal{3}$) is the coordinates in {$L$}.<br>$$<br>d\varepsilon = \frac{|(\widetilde{X}^L_{(k+1,i)}- \bar{X}^L_{(k,j)})\times (\widetilde{X}^L_{(k+1,i)}- \bar{X}^L_{(k,l)})|}{|\bar{X}^L_{(k,j)} - \bar{X}^L_{(k,l)}|} .\text{distance of point to line} \tag{2}<br>$$<br>$$<br>d_{\mathcal{H}} = \frac{|(\widetilde{X}^L_{(k+1, i)} - \bar{X}^L_{(k,j)})\cdot((\bar{X}^L_{(k,j)} - \bar{X}^L_{(k,l)})\times(\bar{X}^L_{(k,j)} - \bar{X}^L_{(k,m)}))|}<br>{|(\bar{X}^L_{(k,l)} - \bar{X}^L_{(k,j)})\times(\bar{X}^L_{(k,m)} - \bar{X}^L_{(k,j)})|}.\text{distance of point to planar}\tag{3}<br>$$</p>
</li>
<li><p>Motion Estimation TODO</p>
<ul>
<li>Corrected every point for a sweep</li>
<li>Motion estimation between two consecutive sweep</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="LIO-SAM"><a href="#LIO-SAM" class="headerlink" title="LIO-SAM"></a>LIO-SAM</h1><h2 id="Assume-1"><a href="#Assume-1" class="headerlink" title="Assume"></a>Assume</h2><ol>
<li>assume nonlinear motion model for point cloud de-skew,estimate the sensor motion during a lidar scan using raw IMU measurements</li>
<li>the estimated motion above also serve as an intial guess for lidar odometry optimization</li>
<li>the lidar-odometry result above is then used to estimate the bias of the IMU in the factor graph.</li>
</ol>
]]></content>
      <categories>
        <category>paper</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>slam</tag>
      </tags>
  </entry>
  <entry>
    <title>Integration IMU</title>
    <url>/2020/07/08/autonomous-integration-imu/</url>
    <content><![CDATA[<p>The measurements of angular volocity and acceleration from an IMU are defined using Eqs below</p>
<a id="more"></a>
<p>$$<br>\hat{w}_t = w_t + b^w_t + n^w_t \tag 1<br>$$<br>$$<br>\hat{a}_t = R^{BW}_t + b^a_t + n^a_t \tag 2<br>$$</p>
<table>
<thead>
<tr>
<th>state</th>
<th>角速度</th>
<th>加速度</th>
</tr>
</thead>
<tbody><tr>
<td>原始值</td>
<td>$\hat{w}_t$</td>
<td>$\hat{a}_t$</td>
</tr>
<tr>
<td>偏置</td>
<td>$bias^w_t$</td>
<td>$bias^a_t$</td>
</tr>
<tr>
<td><strong>corrected</strong></td>
<td>$w^c_t=\hat{w}_t - bias^w_t$</td>
<td>$a^c_t=\hat{a}_t - bias^a_t$</td>
</tr>
<tr>
<td><strong>update bias</strong></td>
<td>$bias^w_t = bias^w_{t-1}$</td>
<td>$bias^a_t = bias^a_{t-1}$</td>
</tr>
<tr>
<td><strong>update pose</strong></td>
<td>$tf_{imu} = \mathcal{R}^{\frac{w^c_t + w^c_{t-1}}{2}\cdot \Delta t}$<br/> $R_t = R_{t-1}\cdot tf_{imu}$</td>
<td>ENU系下$dv=R \cdot a^c_t + g$<br> as for g,imu-z up g=-9.8,down g=9.8<br> 加速度: $\mathcal{dv}=\frac{R_t \cdot a^c_t + R_{t-1} \cdot a^c_{t-1}}{2} + g$<br> 速度: $v_t = v_{t-1} + dv \cdot \Delta t$<br> 位置: $P_t = P_{t-1} + \frac{v_t + v_{t-1}}{2} \cdot \Delta t$</td>
</tr>
</tbody></table>
<p>code</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">last_state</span><br><span class="line"><span class="comment">//update biase</span></span><br><span class="line">Eigen::Vector3d acc_bias = last_state-&gt;acc_bias;</span><br><span class="line">Eigen::Vector3d gyro_bias= last_state-&gt;gyro_bias;</span><br><span class="line"></span><br><span class="line">Eigen::Vector3d mean_corrected_angle_vel = (corrected_angle_vel + last_state-&gt;corrected_angle_vel)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> rot_angle = mean_corrected_angle_vel.norm() * dt;</span><br><span class="line"><span class="function">Eigen::Vector3d <span class="title">rot_axis</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span>(rot_angle &gt; <span class="number">1e-9</span>)&#123;</span><br><span class="line">    rot_axis = mean_corrected_angle_vel.normalized();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Eigen::AngleAxisd <span class="title">tf_rot_vector</span><span class="params">(rot_angle, rot_axis)</span></span>;</span><br><span class="line">attitude = (last_state-&gt;atitude * tf_rot_vector).normalized();<span class="comment">//update pose</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//因为imu的线加速度和角速度数据是在Body坐标系下表示的</span></span><br><span class="line"><span class="comment">//东北天坐标系下线加速度计算公式:"a = R*(acc-acc_biase) + g"</span></span><br><span class="line"><span class="comment">//(acc_biase和gyro_biase不可求，故通常是0，imu-z轴朝下/g=9.8, imu-z轴朝上/g=-9.8),现有车上imu-Z轴朝上</span></span><br><span class="line"><span class="comment">//所以要利用对应时刻的姿态将其转换到世界坐标系下，转换之前要减去bias，转化之后要减去重力加速度</span></span><br><span class="line"><span class="function">Eigen::Vector3d <span class="title">gravity_vector</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">-9.8</span>)</span></span>;<span class="comment">//imu-z up</span></span><br><span class="line">Eigen::Vector3d dv = (attitude*corrected_acc + last_state-&gt;attitude * last_state-&gt;corrected_acc)/<span class="number">2.0</span> + gravity_vector;<span class="comment">//加速度</span></span><br><span class="line"><span class="comment">//update velocity</span></span><br><span class="line">velocity = last_state-&gt;velocity + dv * dt;</span><br><span class="line"><span class="comment">//update position: vt=vo+at, dv是加速度</span></span><br><span class="line">position = last_state-&gt;position + (velocity + last_state-&gt;velocity) /<span class="number">2.0</span> * dt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>autonomous</category>
        <category>imu</category>
      </categories>
      <tags>
        <tag>imu</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记:非暴力沟通</title>
    <url>/2020/12/04/dairy-note-no-valience-chatting/</url>
    <content><![CDATA[<p>阅读《非暴力沟通》摘要.</p>
<a id="more"></a>
<ol>
<li><p>留意</p>
</li>
<li><p>双赢思维(THINK WIN/WIN)<br>双赢思维是一种基于互敬互惠的思考框架，目的是更丰盛的机会、财富和资源，而非敌对式的竞争</p>
</li>
<li><p>知彼解己(SEEK FIRST TO UNDERSTND,THEN TO BE UNDERSTOOD)<br>当我们舍弃回答心，改以了解去聆听别人，便能开启真正的沟通，增进彼此关系。</p>
</li>
<li><p>统合综效(SYNERGIZE)<br>统合综效意思是创造第三种选择-非按照我的方式，也非遵循你的方式，而是第三种远胜于个人之见的方法。敌对的态度(1+1=1/2),不妥协为目标(1+1=3/2)，浅层合作(1+1=2),创造式合作(1+1&gt;2)</p>
</li>
<li><p>不断更新(SHARPEN THE SAW)<br>即在四个基本生活层面(身体、精神、智力、社会/情感)不断的更新迭代自己。</p>
</li>
<li><p>恐怖感和不安全感</p>
</li>
<li><p>我现在就像得到</p>
</li>
<li><p>谴责和抱怨</p>
</li>
<li><p>绝望无助</p>
</li>
<li><p>缺乏人生平衡</p>
</li>
<li><p>我的定位在哪儿</p>
</li>
<li><p>渴望理解</p>
</li>
<li><p>冲突和分歧</p>
</li>
<li><p>个人的停滞不前</p>
</li>
</ol>
]]></content>
      <categories>
        <category>dairy</category>
      </categories>
  </entry>
  <entry>
    <title>读书笔记:高效人士的七个习惯</title>
    <url>/2020/11/29/dairy-note-the-seven-habits-of-effective-awosome/</url>
    <content><![CDATA[<p>阅读《高效人士的七个习惯》摘要.</p>
<a id="more"></a>
<ol>
<li><p>积极主动(BE PROACTIVE)<br>主动积极即采取行动，为自己的过去、现在、未来的行为负责，并依据原则和价值观而非情绪或外在环境来做决定。</p>
</li>
<li><p>以终为始(BEGIN WITH THE END IN MIND)<br>所有事物都经过两次创造-先经过脑海的酝酿和预演，其次才是实质性的创造。</p>
</li>
<li><p>要事第一(PUT FIRST THINGS FIRST)<br>要事第一即实质的创造，是梦想(你的目标、价值观及要事处理的顺序)的组织和实践。</p>
</li>
<li><p>双赢思维(THINK WIN/WIN)<br>双赢思维是一种基于互敬互惠的思考框架，目的是更丰盛的机会、财富和资源，而非敌对式的竞争</p>
</li>
<li><p>知彼解己(SEEK FIRST TO UNDERSTND,THEN TO BE UNDERSTOOD)<br>当我们舍弃回答心，改以了解去聆听别人，便能开启真正的沟通，增进彼此关系。</p>
</li>
<li><p>统合综效(SYNERGIZE)<br>统合综效意思是创造第三种选择-非按照我的方式，也非遵循你的方式，而是第三种远胜于个人之见的方法。敌对的态度(1+1=1/2),不妥协为目标(1+1=3/2)，浅层合作(1+1=2),创造式合作(1+1&gt;2)</p>
</li>
<li><p>不断更新(SHARPEN THE SAW)<br>即在四个基本生活层面(身体、精神、智力、社会/情感)不断的更新迭代自己。</p>
</li>
<li><p>恐怖感和不安全感</p>
</li>
<li><p>我现在就像得到</p>
</li>
<li><p>谴责和抱怨</p>
</li>
<li><p>绝望无助</p>
</li>
<li><p>缺乏人生平衡</p>
</li>
<li><p>我的定位在哪儿</p>
</li>
<li><p>渴望理解</p>
</li>
<li><p>冲突和分歧</p>
</li>
<li><p>个人的停滞不前</p>
</li>
</ol>
]]></content>
      <categories>
        <category>dairy</category>
      </categories>
  </entry>
  <entry>
    <title>Introduction of Kalman Filter</title>
    <url>/2020/12/31/autonomous-kalman-filter/</url>
    <content><![CDATA[<p>The content mainly reference from <a href="https://blog.yongcong.wang/2020/10/29/autonomous/imm-for-prediction/" target="_blank" rel="noopener">yongcongwang’s IMM Prediction</a><br>The Kalman filter which was published by R.E.Kalman in 1960, is a set of mathematical equations that provides an efficient computational (recursive) means to estimate the state of a process, in a way that minimizes the mean of the squared error. <a id="more"></a>The filter is very powerful in several aspects: it supports estimations of past, present, and even future states, and it can do so even when the precise nature of the modeled system is unknown.</p>
<h2 id="Basic-Equations"><a href="#Basic-Equations" class="headerlink" title="Basic Equations"></a>Basic Equations</h2><ul>
<li>overview<br>$$<br>\begin{aligned}<br>  \underset{n \times 1}{X_k} &amp;= \underset{n \times n}{A}\underset{n \times 1}{X_{k-1}} + \underset{n \times b}{B}   \underset{b \times 1}{U_{k-1}} + \underset{n \times 1}{w_{k-1}},(Q)\\<br>  \underset{m \times 1}{Z_k} &amp;= \underset{m \times n}{H}\underset{n \times 1}{X_k} + \underset{m \times 1}{v_{k}},(R)<br>\end{aligned}<br>$$</li>
<li>predict<br>$$<br>\begin{aligned}<br>  \underset{n \times 1}{X_k^{pre}} &amp;= \underset{n \times n}{A} \cdot \underset{n \times 1}{X_{k-1}} + \underset{n \times b}{B} \cdot \underset{b \times 1}{U_{k-1}}\\<br>  \underset{n \times n}{P_k^{pre}} &amp;= \underset{n \times n}{A} \cdot \underset{n \times n}{P_{k-1}} \cdot \underset{n \times n}{A^T} + \underset{n \times n}{Q}<br>\end{aligned}<br>$$</li>
</ul>
<!-- $$
\begin{aligned}
    \underset{n \times n}{P^{pre}_k} will be wrong,it should be write as "\underset{n \times n}{P_k^{pre}}"
\end{aligned}
$$ -->
<ul>
<li>correct<br>$$<br>\begin{aligned}<br>  \mathcal{K_{n \times m}} &amp;= (P^{pre}_kH^T)  \cdot (HP^{pre}_kH^T + R)^{-1} \\<br>  X_k &amp;= X^{pre}_k + \mathcal{K}(Z_k- HX^{pre}_k) \\<br>  P_k &amp;= (I - \mathcal{K}H)P^{pre}_k<br>\end{aligned}<br>$$</li>
</ul>
<h2 id="The-process-to-be-estimated"><a href="#The-process-to-be-estimated" class="headerlink" title="The process to be estimated"></a>The process to be estimated</h2><p>The Kalman filter addressed the general problem of trying to estimate the state $x\in \Re^n$ of a discrete-time controlled process that is governed by the linear stochastic difference equation:<br>$$<br>x_k = Ax_{k-1} + Bu_{k-1} + w_{k-1} \qquad p(w) \sim N(0, Q) \tag{1}<br>$$<br>with a measurement $z \in \Re^m$ that is:<br>$$<br>z_k = Hx_k + v_k \qquad p(v) \sim N(0,R) \tag{2}<br>$$</p>
<ul>
<li>The $n*n$ matrix $A$ is <code>transition matrix</code> which relates the state at the previous time step $k-1$ to the state at the current step $k$, in the absence of either a driving function or process noise. Note that in practice $A$ might change with each time step, but here we assume it is constant.</li>
<li>The $n *1$ matrix $B$ is <code>control matrix</code> which relates the optional control input $u \in \Re^l$ to the state $x$.</li>
<li>The $m *n$ matrix $H$ is <code>measurement matrix</code> which relates the state to the measurement $z_k$. In practice $H$ might change with each time step, but here we also assume it is constant.</li>
<li>The random variable $w_{k-1}$ and $v_k$ represent the process and measurement noise. They are assumed to be independent(of each other), it belongs to gauss-white noise with normal probability distributions. and $Q$ is <code>process noise covariance</code> and $R$ is <code>measurement noise covariance</code>, they might change with each time step, but we assume they are both constant.</li>
</ul>
<h2 id="The-computational-origin-of-the-filter"><a href="#The-computational-origin-of-the-filter" class="headerlink" title="The computational origin of the filter"></a>The computational origin of the filter</h2><p>We define $\hat{x}_k^- \in \Re^n$ to be our <code>priori state</code> estimate at step $k$ given knowledge of the process priori to step $k$ and $\hat{x}_k \in \Re^n$ to be our <code>posteriori state</code>  estimate at step $k$ given measurement $z_k$. we also define $x_k$ is the ground truth, then we can get a <code>priori</code> and a <code>posteriori</code> estimate errors as:<br>$$<br>prio\ estimate\ error: \ e_k^- \equiv x_k - \hat{x}_k^-   \tag{3}<br>$$<br>$$<br>post\ estimate\ error:\ e_k \equiv x_k - \hat{x}_k \tag{4}<br>$$<br>The <code>priori</code> estimate error covariance is:<br>$$<br>P_k^-  = E[e_k^-(e_k^-)^T] \tag{5}<br>$$<br>The <code>posteriori</code> estimate error covariance is:<br>$$<br>P_k = E[e_ke_k^T] \tag{6}<br>$$<br>In deriving the equation for the kalman filter, we begin with the goal of finding an equation that compute an <code>posteriori</code> state estimate $\hat{x}_k$ as a linear combination of the <code>priori</code> estimate $\hat{x}_k^-$ and a weighted difference between an actual measurement $z_k$ and a prediction of the measurement $H\hat{x}_k^-$ as show below:<br>$$<br>\hat{x}_k = \hat{x}_k^- + K(z_k - H\hat{x}_k^-) \tag7<br>$$<br>The difference $(z_k - H\hat{x}_k^-)$ is called the measurement <code>innovation</code> or <code>residual</code>. The residual reflects the discrepency bewteen the predicted measurement $H\hat{x}_k^-$ and the actual measurement $z_k$. A residual of zero means that the two are in complete agreement.<br>The $n*m$ matrix $K$ is chosen to be the <code>gain</code> or <code>blending factor</code> that minimizes the <code>posteriori</code> error covariance in (6).</p>
<p>This minimization can be accomplished by:</p>
<ol>
<li>substituting (7) into the (4) and substituting that into (6);</li>
<li>performing the indicated expectation;</li>
<li>taking the derivative of the trace of the result with respect to $K$;</li>
<li>setting the result equal to $0$ and then solving for $K$.<br>One form of the resulting $K$ that minimized (6) is:</li>
</ol>
<p>$$<br>\begin{aligned}<br>   K_k  &amp;= P_k^-H^T(HP_k^-H^T \ +\ R )^{-1} \\<br>        &amp;= \frac{P_k^-H^T}{HP_k^-H^T \ +\ R }<br>\end{aligned} \tag{8}<br>$$ </p>
<p>Looking at (10) we see that as the measurement error covariance $R \to 0$, the gain $K$ weights the residual more heavily.Specially,<br>$$<br>\lim_{R_k \to 0}K_k = H^{-1} \tag{9}<br>$$<br>On the other hand, as the <code>priori estimate error covariance</code> $P_k^- \to 0$, the gain $K$ weights the residual less heavily.Specially,<br>$$<br>\lim_{P_k^- \to 0}K_k = 0 \tag{10}<br>$$</p>
<p>Another way of thinking about the weighting by $K$ is that as the measurement error covariance $R \to 0$, the actual measurement $z_k$ is <code>more trusted</code>, while the predicted mesaurement $H\hat{x}_k^-$ is <code>less trusted</code>. On the other hand, as the <code>priori estimate error covariance</code> $P_k^- \to 0$, the actual measurement $z_k$ is <code>less trusted</code>, while the predicted measurement $H\hat{x}_k^-$ is <code>more trusted</code>.</p>
<h2 id="The-discrete-Kalman-Filter-Algorithm"><a href="#The-discrete-Kalman-Filter-Algorithm" class="headerlink" title="The discrete Kalman Filter Algorithm"></a>The discrete Kalman Filter Algorithm</h2><p>The kalman filter estimate a process by using a form of feedback control: the filter estimates the process state at some time and then obtains feedback in the form of (noisy) measurement. As such, the equations for the Kalman filter falls into two groups:</p>
<ul>
<li><code>time update</code>(predict) equations;</li>
<li><code>measurement update</code>(correct) equations;</li>
</ul>
<p>The <code>time update</code> equations are responsible for projecting forwar(in time) the current state and error covariance estimates to obtain the <code>prior</code> estimates for the next time step.</p>
<p>The <code>measurement update</code> equations are responsible for the feedback, incorporating a new measurement into the <code>priori estimate</code> to obtain an improved <code>posterori</code> estimate.</p>
<p>The final estimation algorithm resembles that of a <code>predictor-&gt;corrector</code> algorithm for solving numerical problems:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Time Update -----&gt; Measurement Update</span><br><span class="line"> (Predict)             (Correct)</span><br><span class="line">     ^                     |</span><br><span class="line">     |                     |</span><br><span class="line">     -----------------------</span><br></pre></td></tr></table></figure>
<p>The specific equations for the <code>time update(predictor)</code> are:<br>$$<br>\hat{x}_k^- = A\hat{x}_{k-1} + Bu_{k-1} \tag{11}<br>$$<br>$$<br>P_k^- = AP_{k-1}A^T + Q \tag{12}<br>$$<br>where:</p>
<ul>
<li>$\hat{x}_{k-1}$ is the <code>posteriori</code> state from time step $k-1$; </li>
<li>$u_{k-1}$ is the control from time step $k-1$;</li>
<li>$\hat{x}_k^-$ is the <code>priori</code> state from time step $k$;</li>
<li>$P_{k-1}$ is the <code>posterirori</code> estimate error covariance from time step $k-1$;</li>
<li>$P_k^-$ is the <code>priori</code> estimate error covariance from time step $k$;</li>
</ul>
<p>The specific equations for the <code>measurement update(corrector)</code> are:<br>$$<br>K_k = P_k^-H^T \cdot (HP_k^-H^T + R)^{-1} \tag{13}<br>$$<br>$$<br>\hat{x}_k = \hat{x}_k^- + K_k\cdot (z_k - H\hat{x}_k^-) \tag{14}<br>$$<br>$$<br>P_k= (I - K_kH) \cdot P_k^- \tag{15}<br>$$<br>where:</p>
<ul>
<li>$K_k$ is the <code>gain</code> from time step $k$;</li>
<li>$z_k$ is the actual measurement variable from time step $k$;</li>
<li>$\hat{x}_k$ is the <code>posteriori</code> state from time step $k$;</li>
<li>$P_k$ is the <code>posteriori</code> estimate error covariance from time step $k$;</li>
</ul>
<h2 id="Python-of-Kalman-Filter"><a href="#Python-of-Kalman-Filter" class="headerlink" title="Python of Kalman Filter"></a>Python of Kalman Filter</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KalmanFilter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, A, B, H, Q, R)</span>:</span></span><br><span class="line">        self.A = A</span><br><span class="line">        self.B = B</span><br><span class="line">        self.H = H</span><br><span class="line">        self.Q = Q</span><br><span class="line">        self.R = R</span><br><span class="line"></span><br><span class="line">        self.U = np.zeros((B.shape[<span class="number">1</span>], <span class="number">1</span>))</span><br><span class="line">        self.X = np.zeros((A.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">        self.X_pre = self.X</span><br><span class="line">        self.P = np.zeros(A.shape)</span><br><span class="line">        self.P_pre = self.P</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, A, H)</span>:</span></span><br><span class="line">        self.A = A</span><br><span class="line">        self.X = np.zeros((A.shape[<span class="number">0</span>], <span class="number">1</span>))</span><br><span class="line">        self.B = np.eye(A.shape[<span class="number">0</span>])</span><br><span class="line">        self.U = np.zeros((self.B.shape[<span class="number">1</span>], <span class="number">1</span>))</span><br><span class="line">        self.Q = np.eye(A.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        self.H = H</span><br><span class="line">        self.R = np.eye(H.shape[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        self.X_pre = self.X</span><br><span class="line">        self.P = np.zeros(A.shape)</span><br><span class="line">        self.P_pre = self.P</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">filt</span><span class="params">(self, Z)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        x = A*x + B*u +Q</span></span><br><span class="line"><span class="string">        y = H*x +     R</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.__predict()</span><br><span class="line">        self.__update(Z)</span><br><span class="line">        <span class="keyword">return</span> self.X</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__predict</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        x_next = A*x + B*u</span></span><br><span class="line"><span class="string">        P_next = A*P*AT + Q</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.X_pre = np.dot(self.A, self.X) + np.dot(self.B, self.U)</span><br><span class="line">        self.P_pre = np.dot(np.dot(self.A, self.P), self.A.T) + self.Q</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__update</span><span class="params">(self, Z)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        K = (P_next*HT) * (H*P_next*HT + R).inverse()</span></span><br><span class="line"><span class="string">        x = x_next + K*(z - H*x_next)</span></span><br><span class="line"><span class="string">        P = P_next - K*H*P_next</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        K = np.dot(np.dot(self.P_pre, self.H.T),</span><br><span class="line">                   np.linalg.inv(np.dot(np.dot(self.H, self.P_pre), self.H.T) +</span><br><span class="line">                                 self.R))</span><br><span class="line">        self.X = self.X_pre + np.dot(K, Z - np.dot(self.H, self.X_pre))</span><br><span class="line">        self.P = self.P_pre - np.dot(np.dot(K, self.H), self.P_pre)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>autonomous</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>点云分割的基本调研</title>
    <url>/2020/01/12/autonomous-cloud-segmentation/</url>
    <content><![CDATA[<p>找到较早期整理的文档, 保存一下到blog.</p>
<a id="more"></a>
<h1 id="传统分割方法"><a href="#传统分割方法" class="headerlink" title="传统分割方法"></a>传统分割方法</h1><p>典型方法pcl参见<a href="http://pointclouds.org/documentation/tutorials/index.php" target="_blank" rel="noopener">pcl documentation</a>,且有使用实例</p>
<h2 id="基于几何特征"><a href="#基于几何特征" class="headerlink" title="基于几何特征"></a>基于几何特征</h2><p>基于sphere/cone/plane/cylinder等数学规则进行拟合</p>
<!-- ![](/images/autonomous/cloud_segmentation/survey/2.1.1-geometry.png) -->
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.1-geometry.png" width="300pix" height="320pix" />

<h2 id="区域增长-应用广泛、持续研究中"><a href="#区域增长-应用广泛、持续研究中" class="headerlink" title="区域增长(应用广泛、持续研究中)"></a>区域增长(应用广泛、持续研究中)</h2><p>基于各种特征及组合特征的区域增长(欧式距离聚类本质为区域增长,判断欧式距离)等。<br>核心思想就是从一个点出发,依据约束条件(距离、法向量、密度度量、凹凸性、曲率等)最终增长扩散为一簇</p>
<!-- ![](/images/autonomous/cloud_segmentation/survey/2.1.2-region-grow.png) -->

<ul>
<li><p>基本流程</p>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.2-region-grow.png" width="400pix"/>
</li>
<li><p>点云特征</p>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.2-featue-normal.png" width="500pix"/>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.2-featue2.png" width="600pix"/>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.2-featue3.png" width="500pix"/>
## 最小分割
基于图论,应用网络规划,求解桥问题,图像分割等领域,被移植到点云分割,点之间连接为图,赋予连线权值,获得点之间的拓扑关系，分割目标需要人为指定(如指定了目标物体上的一个点)!!!。
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.3-minial-cut.png" width="300pix"/>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.3-minial-cut-car.png" width="500pix"/>

</li>
</ul>
<h2 id="基于形态学分割-图像处理算法衍生到点云"><a href="#基于形态学分割-图像处理算法衍生到点云" class="headerlink" title="基于形态学分割(图像处理算法衍生到点云)"></a>基于形态学分割(图像处理算法衍生到点云)</h2><p>航空摄影测量中为去除地面噪声对地形测量的影响,不使用地面平整假设的前提下获得地面机载lidar 测量方向和地面垂直,形成xy-&gt;z映射(z方向的范围远远小于xy方向),z方向代表地面物体的高度,x,y方向为平行与地面且相互垂直的两个轴</p>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.4-aerial.png" width="500pix"/>

<h2 id="超体聚类"><a href="#超体聚类" class="headerlink" title="超体聚类"></a>超体聚类</h2><p>基于Octree八叉树对点云进行划分均匀分布,获得不同点团之间的邻接关系<br><img data-src="/images/autonomous/cloud_segmentation/survey/2.1.5-1.png" width="500pix"/><br>所有的晶核(seed)同时开始生长,最终填满整个空间完成分割,本质还是基于区域生长思想。<br>首先需要规律的布置区域生长晶核(晶核在空间中实际上是均匀分布), 并指定晶核距离(Rseed),粒子距离(Rvoxel),最小晶粒(MOV),过小的晶粒需要融入最近的大晶粒<br><img data-src="/images/autonomous/cloud_segmentation/survey/2.1.5-2.png" width="500pix"/><br>有了晶核(seed)和结晶范围(搜索半径)之后,然后控制结晶过程(增长约束条件)以完成分割<br><img data-src="/images/autonomous/cloud_segmentation/survey/2.1.5-3.png" width="300pix"/></p>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.5-4.png" width="600pix"/> 
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.5-5.png" width="600pix"/>

<h2 id="LCCP-Locally-Convex-Connected-Pathches-基于超体聚类-凹凸关系"><a href="#LCCP-Locally-Convex-Connected-Pathches-基于超体聚类-凹凸关系" class="headerlink" title="LCCP(Locally Convex Connected Pathches)基于超体聚类(凹凸关系)"></a>LCCP(Locally Convex Connected Pathches)基于超体聚类(凹凸关系)</h2><ol>
<li>基于超体聚类实现过分割</li>
<li>基于空间信息和法线信息,在超体聚类的基础上再聚类去除过分割</li>
<li>对于过分割的点云计算不同的块之间凹凸关系并记录,然后基于区域增长将小区域聚类成较大的物体(只允许区域跨越凸边增长)</li>
</ol>
<img data-src="/images/autonomous/cloud_segmentation/survey/2.1.6.png" width="650pix"/>

<h1 id="投影方法-维度损失"><a href="#投影方法-维度损失" class="headerlink" title="投影方法(维度损失)"></a>投影方法(维度损失)</h1><ul>
<li>基于虚拟图像平面投影<br>将点云投影为rang-image/intensity-image基于激光束特性、和雷达自身参数相关<img data-src="/images/autonomous/cloud_segmentation/survey/2.2.1.png" width="700pix"/></li>
<li>基于2D-Grid地面方格或极坐标格投影(DAPAR挑战赛中广泛使用)<br>投影到2D-grid<br>raster参数根据点云数据调整,单独使用容易分割不足或过分割<img data-src="/images/autonomous/cloud_segmentation/survey/2.2.2.png" width="600pix"/>

</li>
</ul>
<h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><p>3D grid+PointNet+3D CNN、 MinCut、KPCon、 RS-CNN….语义分割<br>Hugues et al KPConv.arXiv 2019<br>pointpillar<br>准确率、召回率之间较好的平衡</p>
]]></content>
      <categories>
        <category>autonomous</category>
        <category>segmentation</category>
      </categories>
      <tags>
        <tag>segmentation</tag>
      </tags>
  </entry>
  <entry>
    <title>cloud segmentation and filtered by hdmap</title>
    <url>/2020/07/12/autonomous-cloud-segmentation-hdmap/</url>
    <content><![CDATA[<p>基本流程：</p>
<ol>
<li>分割地面点和非地面点</li>
<li>基于非地面点进行点云分割</li>
<li>实时加载hdmap将位于道路上的分割结果进去滤出(亦可通过tracking将动态障碍物滤除)<a id="more"></a>
<h4 id="整体概览"><a href="#整体概览" class="headerlink" title="整体概览"></a>整体概览</h4></li>
<li>左下角为原始点云数据</li>
<li>右下角为检测的地面点云</li>
<li>左上角为分割的结果(已根据hdmap滤出位于道路上的动态障碍物)</li>
<li>右上角为滤出动态障碍物后点云<br><img data-src="/images/autonomous/cloud_segmentation/hdmap_filter/general_viewer.gif" alt="general view of the lidar segmentation"><h4 id="地面的分割"><a href="#地面的分割" class="headerlink" title="地面的分割"></a>地面的分割</h4>采用极坐标投影网格和平面拟合的方法<br><img data-src="/images/autonomous/cloud_segmentation/hdmap_filter/ground_detect.mp4.gif" alt="ground detect,and the objects on road is filtered by hdmap"><br><img data-src="/images/autonomous/cloud_segmentation/hdmap_filter/ground_detect.png" alt="the detail of ground detection"><h4 id="点云聚类"><a href="#点云聚类" class="headerlink" title="点云聚类"></a>点云聚类</h4>采用网格投影-&gt;膨胀-&gt;连通分析-&gt;收缩<br><img data-src="/images/autonomous/cloud_segmentation/hdmap_filter/objs_filtered0_byhdmap.mp4.gif" alt=""><br><img data-src="/images/autonomous/cloud_segmentation/hdmap_filter/objs_filtered_byhdmap.mp4.gif" alt="vechicle and pedestrian filtered by hdmap"></li>
</ol>
]]></content>
      <categories>
        <category>autonomous</category>
        <category>pointcloud</category>
      </categories>
      <tags>
        <tag>pointcloud</tag>
        <tag>segmentation</tag>
        <tag>hdmap</tag>
      </tags>
  </entry>
  <entry>
    <title>usage of mathjax</title>
    <url>/2020/07/08/tools-usage-markdowon/</url>
    <content><![CDATA[<p>花体字母$\mathcal{H}$</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>math</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Terminator Shortcuts Usage</title>
    <url>/2020/10/30/tools-usage-terminator-shortcuts/</url>
    <content><![CDATA[<p>Terminator Shortcuts Usage</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th align="left">shortcuts</th>
<th align="left">info</th>
</tr>
</thead>
<tbody><tr>
<td align="left">ctrl+shift+o</td>
<td align="left">split windows horizontal</td>
</tr>
<tr>
<td align="left">ctrl+shift+e</td>
<td align="left">split windows vertical</td>
</tr>
<tr>
<td align="left">ctrl+shift+x</td>
<td align="left">switch between current window and all windows</td>
</tr>
<tr>
<td align="left">ctrl+shift+arrows</td>
<td align="left">move splitter bars of current working window</td>
</tr>
<tr>
<td align="left">alt+arrows</td>
<td align="left">switch between different working windows</td>
</tr>
<tr>
<td align="left">ctrl+shift+w</td>
<td align="left">close current window</td>
</tr>
<tr>
<td align="left">ctrl+shift+q</td>
<td align="left">close all window,that means close current terminator</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>tools</category>
        <category>asdf_test</category>
      </categories>
  </entry>
  <entry>
    <title>tools python-matploglib</title>
    <url>/2020/07/22/tools-tools-python-matplotlib/</url>
    <content><![CDATA[<p>主要记录日常python使用的matplotlib绘图时出现的常见情况</p>
<a id="more"></a>
<h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><h4 id="color-table-for-reference"><a href="#color-table-for-reference" class="headerlink" title="color table for reference"></a>color table for reference</h4><p><img data-src="/images/python/matplotlib_color_table.png" alt="matplotlib_color_table"></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>programing</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>tools devel-enviroment</title>
    <url>/2020/07/22/tools-tools-devel-environment/</url>
    <content><![CDATA[<p>依赖库下载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line">wget https://www.python.org/ftp/python/3.6.3/Python-3.6.3.tgz</span><br><span class="line"><span class="comment">#google-series</span></span><br><span class="line">wget https://github.com/google/googletest/archive/release-1.8.0.tar.gz</span><br><span class="line">wget https://github.com/gflags/gflags/archive/v2.2.0.tar.gz</span><br><span class="line">wget https://github.com/google/glog/archive/v0.3.5.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>programing</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>icp算法的20年</title>
    <url>/2020/07/08/paper-lidar-ethicp/</url>
    <content><![CDATA[<p>$$<br>y = \frac{a}{b}<br>$$</p>
<h3 id="ETH-libpointmatcher使用"><a href="#ETH-libpointmatcher使用" class="headerlink" title="ETH-libpointmatcher使用"></a>ETH-libpointmatcher使用</h3><p>使用的eigen版本需和pcl的一致，</p>
<p>科学实验方法的三个原则: 可比较(可评估)、可复现(稳定重复)、可证明(可解释)<br>算法内在：什么参数、不同参数下表现的差异<br>算法外在：准确度、精度</p>
<a id="more"></a>
<p>The first one is to remove some points that do not bring any valuable infor-<br>mation for the registration. As the complexity of the algorithm is linear<br>in the number of points, reducing this number can have a significant<br>impact on the time of registration. The second use of filters can be to<br>add information to the point. The typical example is the inference of<br>local structural properties of the shape, such as normal information or<br>curvature. This information, which is usually not present in the raw<br>sensor data, can allow for better registration through a more precise<br>association of the points, or the computation of the error to minimize</p>
<p>$$<br>\hat{T^B_A}=arg\min_{T}(error(T(P^A),Q^B))<br>$$</p>
<p>different platform </p>
<table>
<thead>
<tr>
<th align="left">parameters</th>
<th align="left">Arto(rough Terrain outdoor robot)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">DataFilter</td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="ICP-of-ETH"><a href="#ICP-of-ETH" class="headerlink" title="ICP of ETH"></a>ICP of ETH</h3><h4 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h4><ol>
<li>eigen:matrix and liear-albebra library</li>
<li>libnabo:from eth, a fast k nearest neighbour library for low-dimensional spaces</li>
<li>libboost</li>
</ol>
<h4 id="Data-flow-of-ETH-ICP"><a href="#Data-flow-of-ETH-ICP" class="headerlink" title="Data flow of ETH-ICP "></a>Data flow of ETH-ICP <br></h4><p>  <img data-src="/images/lidar-odometry/libpointmatcher/default_icp_chain.svg" alt=""><br>  <img data-src="/images/lidar-odometry/libpointmatcher/icp_tutorial_reading.gif" alt=""></p>
<h4 id="Theory-of-eth-icp-algorithm"><a href="#Theory-of-eth-icp-algorithm" class="headerlink" title="Theory of eth-icp algorithm"></a>Theory of eth-icp algorithm</h4><p><img data-src="/images/lidar-odometry/eth-icp-basic-algorithm.png" alt=""></p>
<ol>
<li>Reading and Reference Sources<br>shapes P are point clouds and can be written in a matrix form with each column a point vector:<br>$$<br>\mathcal P = \bold P=[p_1\quad p_2\quad …\quad p_N]<br>$$<br>where $p_i$is a point and N the number of points in the point cloud<br>Features is an <a href="http://eigen.tuxfamily.org/dox/classEigen_1_1Matrix.html" target="_blank" rel="noopener">Eigen matrix</a> typically containing the coordinates of the points which form the cloud.  Each column corresponds to a point in the cloud.  The rows correspond to the dimensions of the points in homogeneous coordinates.  Homogeneous coordinates are used to allow for translations and rotations.  For 2D point clouds, there will thus be 3 rows and for 4 rows for 3D point clouds.</li>
</ol>
<p><img data-src="/images/lidar-odometry/libpointmatcher/featuresMatrix.png" alt="features matrix"> </p>
<!-- <img data-src="/images/lidar-odometry/libpointmatcher/featuresMatrix.png" style="float:center" /> -->

<ol>
<li><p>Transformation Functions<br>In case of a rigid transformation, if points are represented using homogeneous coordinates, a transformation T can be represented as a matrix T such that:</p>
<p>$$<br>\mathcal T(\mathcal P) = \boldsymbol{TP} = [\boldsymbol{T}\boldsymbol{p_1}\quad \boldsymbol{T}\boldsymbol{p_2}\quad …\quad \boldsymbol{T}\boldsymbol{p_N}]<br>$$</p>
<p>$\boldsymbol{T}$ is  then of the form:</p>
<p>$$<br>\boldsymbol{T} = \begin{bmatrix}\boldsymbol{R} &amp; \boldsymbol{t} \ \boldsymbol{0^T} &amp; 1<br>\end{bmatrix}<br>$$</p>
<p>where$\boldsymbol{R}$ is a rotation matrix and $\boldsymbol{t}$ is a translation vector</p>
<p>The generic formula computiing the final transform Equation becomes a simple matrix product:</p>
<p>$$<br>\begin{aligned}<br>\hat{\mathcal{T}}<em>{\mathbb{A}}^{\mathbb{B}} = ({\mathop{\bigcirc}\limits</em>{ \mathcal{T}<em>{i-1}^i)\circ\mathcal{T</em>{init}} \ \Leftrightarrow \hat{\boldsymbol{T {\mathbb{A}}^{\mathbb{B}}=\left(\mathop{\prod}\limits_{i}\boldsymbol{T}<em>{i ^i\right)\boldsymbol{T}</em>{init}<br>\end{aligned}<br>$$</p>
<p>$$<br>\hat{T^B_A}=arg\min_{T}(error(T(P^A),Q^B))<br>$$<br><img data-src="/images/lidar-odometry/eth-icp-flow-graph.png" alt=""></p>
</li>
<li><p>Data Filters</p>
<ul>
<li><p>Feature Enhancement</p>
</li>
<li><p>Descriptor Enhancement</p>
</li>
<li><p>Feature Reduction<br>features are sparse but not uniformly distributed. Nevertheless, the fact that sensors can provide a huge number of readings on a short period of time reates a bottleneck in term of computation power for the association as explained later</p>
</li>
<li><p>Sensor Noise<br>example1:<br>random subsampling in order to decimate the point cloud:</p>
<p>$$<br>\mathcal{P}^{\acute{}} = datafilter(\mathcal{P}) = {\boldsymbol{p}\in\mathcal{P}:\eta(\boldsymbol{p}) &lt; \theta}<br>$$</p>
<p>where $\eta\in[0,1)$ is a uniform-distributed random value and θ ∈ [0, 1] a fixed threshold, corresponding to the fraction of points to keep</p>
<p>example2:<br>the computation of normal vectors in a point cloud:</p>
<p>$$<br>\mathcal{P}^{\acute{}} = datafilter(\mathcal{P}) = {\boldsymbol{p}\in\mathcal{P}:\eta(\boldsymbol{p}) &lt; \theta}<br>$$</p>
<p>datafilter example:<br><img data-src="/images/lidar-odometry/libpointmatcher/descriptorsMatrix.png" alt="descriptors matrix"><br><strong>Surface Normal Filter</strong><br>The surface normal to each point is estimated by finding a number of neighboring points and taking the eigen-vector corresponding to the smallest eigen-value of all neighboring points.<br><strong>Required descriptors:</strong> none<br><strong>Output descriptor:</strong><br><code>normals</code><br><code>densities</code><br><code>eigValues</code><br><code>eigVectors</code><br><img data-src="/images/lidar-odometry/libpointmatcher/orient_norm.png" alt=""><br><strong>Maximum Density Filter</strong><br>This filter is used to homogenize the density of a point cloud by rejecting a sub-sample of points in high-density regions.Points are only considered for rejection if they exceed a density threshold, otherwise they are preserved.<br><strong>Required descriptors:</strong> <code>densities</code><br><strong>Output descriptor:</strong> none<br><img data-src="/images/lidar-odometry/libpointmatcher/max_dens_before.png" alt=""><br><img data-src="/images/lidar-odometry/libpointmatcher/max_dens_after.png" alt=""></p>
</li>
</ul>
</li>
</ol>
<h4 id="Experiment"><a href="#Experiment" class="headerlink" title="Experiment"></a>Experiment</h4><p><strong>Test Platform</strong>:offline test and online(ranger) test<br><strong>Test Data</strong>:24/06/2020 dataset for mapping from hengtong<br><strong>Test Algorithm</strong>:eth-icp and pcl-icp<br><strong>Test Result</strong>: </p>
<h5 id="offline-test"><a href="#offline-test" class="headerlink" title="offline test"></a>offline test</h5><p>comparison of the post poses and lidar-odometry by eth-icp<br><img data-src="/images/lidar-odometry/regis_icp_eth.png" alt=""><br><img data-src="/images/lidar-odometry/regis_icp_eth.png" alt=""><br>comparison of the post poses and lidar-odometry by icp-pcl<br><img data-src="/images/lidar-odometry/regis_icp_pcl.png" alt=""></p>
<h5 id="online-test"><a href="#online-test" class="headerlink" title="online test"></a>online test</h5><p>comparison of the post poses and lidar-odometry by eth-icp<br><img data-src="/images/lidar-odometry/ranger_icp_eth1.mp4.gif" alt=""><br><img data-src="/images/lidar-odometry/regis_icp_eth_filter1.png" alt=""><br>comparison of the post poses and lidar-odometry by icp-pcl<br><img data-src="/images/lidar-odometry/ranger_icp_pcl.png" alt=""></p>
]]></content>
      <categories>
        <category>paper</category>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>pointcloud</tag>
        <tag>registration</tag>
      </tags>
  </entry>
  <entry>
    <title>usage of vector&#39;s multi</title>
    <url>/2020/07/08/math-multiple-of-vector/</url>
    <content><![CDATA[<p>note about operation of vector,such as dot and cross</p>
<a id="more"></a>
<h4 id="向量点乘"><a href="#向量点乘" class="headerlink" title="向量点乘"></a>向量点乘</h4><!-- web-front not supprt \bold{a}, but support \mathbf{a} -->
<ul>
<li>二维向量<br>$$<br>\begin{aligned}<br>  \mathbf{\overrightarrow{a}} &amp;= a_1\mathbf{i}+a_2\mathbf{j}\\<br>\mathbf{\overrightarrow{b}} &amp;= b_1\mathbf{i}+b_2\mathbf{j} \\<br>\mathbf{\overrightarrow{a}}\cdot\mathbf{\overrightarrow{b}} &amp;= a_1b_1\mathbf{i}+a_2b_2\mathbf{j}<br>\end{aligned} \tag{1}<br>$$</li>
<li>三维向量<br>$$<br>\begin{aligned}<br>  \mathbf{\overrightarrow{a}} &amp;= a_1\mathbf{i}+a_2\mathbf{j}+a_3\mathbf{k}\\<br>\mathbf{\overrightarrow{b}} &amp;= b_1\mathbf{i}+b_2\mathbf{j}+b_3\mathbf{k}  \\<br>\mathbf{\overrightarrow{a}}\cdot\mathbf{\overrightarrow{b}} &amp;= a_1b_1\mathbf{i}+a_2b_2\mathbf{j}+a_3b_3\mathbf{k}<br>\end{aligned}\tag{2}<br>$$<h4 id="向量叉乘"><a href="#向量叉乘" class="headerlink" title="向量叉乘"></a>向量叉乘</h4></li>
<li>三维向量<br>$$<br>\begin{aligned}<br>  \mathbf{\overrightarrow{a}} &amp;= a_1\mathbf{i}+a_2\mathbf{j}+a_3\mathbf{k}\\<br>\mathbf{\overrightarrow{b}} &amp;= b_1\mathbf{i}+b_2\mathbf{j}+b_3\mathbf{k}  \\<br>\mathbf{\overrightarrow{a}}\times\mathbf{\overrightarrow{b}} &amp;=<br>   \begin{bmatrix}<br>   \mathbf{i} &amp; \mathbf{j}&amp; \mathbf{k}\\<br>   a_1      &amp; a_2     &amp;a_3\\<br>   b_1      &amp; b_2     &amp;b_3<br>   \end{bmatrix} \\ &amp;= (a_2b_3 - a_3b_2)\mathbf{i} + (a_3b_1 - a_1b_3)\mathbf{j} + (a_1b_2 - a_2b_1)\mathbf{k} \\<br>   &amp;=<br>   \begin{bmatrix}<br>   a_2 &amp; a_3  \\<br>   b_2 &amp; b_3<br>   \end{bmatrix}\mathbf{i} +<br>   \begin{bmatrix}<br>   a_3 &amp; a_1  \\<br>   b_3 &amp; b_1<br>   \end{bmatrix}\mathbf{j}+<br>   \begin{bmatrix}<br>   a_1 &amp; a_2  \\<br>   b_1 &amp; b_2<br>   \end{bmatrix}\mathbf{k}<br>\end{aligned}\tag{3}<br>$$</li>
<li>二维向量<br>$$<br>\begin{aligned}<br>  \mathbf{\overrightarrow{a}} &amp;= a_1\mathbf{i}+a_2\mathbf{j}\\<br>\mathbf{\overrightarrow{b}} &amp;= b_1\mathbf{i}+b_2\mathbf{j}  \\<br>\mathbf{\overrightarrow{a}}\times\mathbf{\overrightarrow{b}} &amp;=<br>   \begin{bmatrix}<br>   \mathbf{i} &amp; \mathbf{j}&amp; \mathbf{k}\\<br>   a_1      &amp; a_2     &amp;0\\<br>   b_1      &amp; b_2     &amp;0<br>   \end{bmatrix} \\ &amp;=  (a_1b_2 - a_2b_1)\mathbf{k} \\<br>   &amp;=<br>   \begin{bmatrix}<br>   a_1 &amp; a_2  \\<br>   b_1 &amp; b_2<br>   \end{bmatrix}\mathbf{k}<br>\end{aligned} \tag{4}<br>$$</li>
</ul>
]]></content>
      <categories>
        <category>math</category>
        <category>vector operation</category>
      </categories>
      <tags>
        <tag>math</tag>
      </tags>
  </entry>
</search>
